{"version":3,"sources":["C:\\Users\\User\\OneDrive\\Desktop\\6senseHQ-HireX-client\\auth.ts"],"sourcesContent":["import axios from 'axios';\nimport NextAuth, { Session } from 'next-auth';\nimport GoogleProvider from 'next-auth/providers/google';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { AuthGoogleID, AuthGoogleSecret } from './config';\ndeclare module 'next-auth' {\n  interface Session {\n    accessToken?: string;\n    refreshToken?: string;\n  }\n\n  interface User {\n    accessToken?: string;\n    refreshToken?: string;\n  }\n}\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  session: {\n    strategy: 'jwt',\n  },\n  providers: [\n    GoogleProvider({\n      clientId: AuthGoogleID,\n      clientSecret: AuthGoogleSecret,\n      authorization: {\n        params: {\n          prompt: 'select_account',\n        },\n      },\n    }),\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: {\n          label: 'Email',\n          type: 'text',\n          placeholder: 'example@example.com',\n        },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        try {\n          const response = await axios.post(\n            'http://192.168.0.158:8000/auth/login',\n            {\n              email: credentials?.email,\n              password: credentials?.password,\n            },\n            {\n              headers: {\n                'Content-Type': 'application/json',\n              },\n            }\n          );\n\n          const data = response.data;\n\n          // Ensure tokens are included in the returned object\n          if (data?.tokens?.access_token) {\n            return {\n              email: credentials.email,\n              accessToken: data.tokens.access_token,\n              refreshToken: data.tokens.refresh_token,\n            } as any;\n          }\n\n          return false; // Login failed\n        } catch (error) {\n          console.error('Error during credential login:', error);\n          return false;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user, account }) {\n      // Merge tokens for both Google and Credential-based logins\n      if (user) {\n        console.log('SESSION FLOW');\n        token.accessToken = user.accessToken || token.accessToken;\n        token.refreshToken = user.refreshToken || token.refreshToken;\n      }\n\n      if (account && account.provider === 'google') {\n        // Google login flow\n        console.log('FOUND GOOGLE AUTH FLOW');\n        const response = await axios.post(\n          'http://192.168.0.158:8000/auth/social-login',\n          {\n            idToken: account.id_token,\n            provider: 'google',\n          },\n          {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n\n        token.accessToken = response.data?.tokens?.access_token;\n        token.refreshToken = response.data?.tokens?.refresh_token;\n      }\n\n      return token;\n    },\n    async session({ session, token }) {\n      session.accessToken = token.accessToken as string;\n      session.refreshToken = token.refreshToken as string;\n      // console.log('SESSION ACTIVATED: ' + session.accessToken);\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      return baseUrl + '/dashboard';\n    },\n  },\n});\n"],"names":["auth","handlers","signIn","signOut","NextAuth","session","strategy","providers","GoogleProvider","clientId","AuthGoogleID","clientSecret","AuthGoogleSecret","authorization","params","prompt","CredentialsProvider","name","credentials","email","label","type","placeholder","password","authorize","response","axios","post","headers","data","tokens","access_token","accessToken","refreshToken","refresh_token","error","console","callbacks","jwt","token","user","account","log","provider","idToken","id_token","redirect","url","baseUrl"],"mappings":";;;;;;;;;;;IAiB0CA,IAAI;eAAJA;;IAA3BC,QAAQ;eAARA;;IAAUC,MAAM;eAANA;;IAAQC,OAAO;eAAPA;;;8DAjBf;iEACgB;+DACP;oEACK;wBACe;;;;;;AAaxC,MAAM,EAAEF,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEH,IAAI,EAAE,GAAGI,IAAAA,iBAAQ,EAAC;IAC1DC,SAAS;QACPC,UAAU;IACZ;IACAC,WAAW;QACTC,IAAAA,eAAc,EAAC;YACbC,UAAUC,oBAAY;YACtBC,cAAcC,wBAAgB;YAC9BC,eAAe;gBACbC,QAAQ;oBACNC,QAAQ;gBACV;YACF;QACF;QACAC,IAAAA,oBAAmB,EAAC;YAClBC,MAAM;YACNC,aAAa;gBACXC,OAAO;oBACLC,OAAO;oBACPC,MAAM;oBACNC,aAAa;gBACf;gBACAC,UAAU;oBAAEH,OAAO;oBAAYC,MAAM;gBAAW;YAClD;YACA,MAAMG,WAAUN,WAAW;gBACzB,IAAI;oBACF,MAAMO,WAAW,MAAMC,cAAK,CAACC,IAAI,CAC/B,wCACA;wBACER,OAAOD,aAAaC;wBACpBI,UAAUL,aAAaK;oBACzB,GACA;wBACEK,SAAS;4BACP,gBAAgB;wBAClB;oBACF;oBAGF,MAAMC,OAAOJ,SAASI,IAAI;oBAE1B,oDAAoD;oBACpD,IAAIA,MAAMC,QAAQC,cAAc;wBAC9B,OAAO;4BACLZ,OAAOD,YAAYC,KAAK;4BACxBa,aAAaH,KAAKC,MAAM,CAACC,YAAY;4BACrCE,cAAcJ,KAAKC,MAAM,CAACI,aAAa;wBACzC;oBACF;oBAEA,OAAO,OAAO,eAAe;gBAC/B,EAAE,OAAOC,OAAO;oBACdC,QAAQD,KAAK,CAAC,kCAAkCA;oBAChD,OAAO;gBACT;YACF;QACF;KACD;IACDE,WAAW;QACT,MAAMC,KAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAE;YAChC,2DAA2D;YAC3D,IAAID,MAAM;gBACRJ,QAAQM,GAAG,CAAC;gBACZH,MAAMP,WAAW,GAAGQ,KAAKR,WAAW,IAAIO,MAAMP,WAAW;gBACzDO,MAAMN,YAAY,GAAGO,KAAKP,YAAY,IAAIM,MAAMN,YAAY;YAC9D;YAEA,IAAIQ,WAAWA,QAAQE,QAAQ,KAAK,UAAU;gBAC5C,oBAAoB;gBACpBP,QAAQM,GAAG,CAAC;gBACZ,MAAMjB,WAAW,MAAMC,cAAK,CAACC,IAAI,CAC/B,+CACA;oBACEiB,SAASH,QAAQI,QAAQ;oBACzBF,UAAU;gBACZ,GACA;oBACEf,SAAS;wBACP,gBAAgB;oBAClB;gBACF;gBAGFW,MAAMP,WAAW,GAAGP,SAASI,IAAI,EAAEC,QAAQC;gBAC3CQ,MAAMN,YAAY,GAAGR,SAASI,IAAI,EAAEC,QAAQI;YAC9C;YAEA,OAAOK;QACT;QACA,MAAMlC,SAAQ,EAAEA,OAAO,EAAEkC,KAAK,EAAE;YAC9BlC,QAAQ2B,WAAW,GAAGO,MAAMP,WAAW;YACvC3B,QAAQ4B,YAAY,GAAGM,MAAMN,YAAY;YACzC,4DAA4D;YAC5D,OAAO5B;QACT;QACA,MAAMyC,UAAS,EAAEC,GAAG,EAAEC,OAAO,EAAE;YAC7B,OAAOA,UAAU;QACnB;IACF;AACF"}