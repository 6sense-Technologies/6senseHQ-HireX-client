747fa8807694482338737b62bf5250f3
"use strict";
// Mock NextAuth and its methods
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn(()=>({
                data: null,
                status: 'unauthenticated'
            })),
        signIn: jest.fn(),
        signOut: jest.fn()
    }));
jest.mock('next-auth/providers/google', ()=>({
        __esModule: true,
        default: jest.fn(()=>({
                id: 'google',
                name: 'Google',
                type: 'oauth',
                clientId: 'mock-client-id',
                clientSecret: 'mock-client-secret'
            }))
    }));
jest.mock('axios', ()=>({
        post: jest.fn(()=>Promise.resolve({
                data: {
                    tokens: {
                        access_token: 'mock-access-token',
                        refresh_token: 'mock-refresh-token'
                    }
                }
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _store = require("../store/store");
const _page = /*#__PURE__*/ _interop_require_default(require("../app/(auth)/login/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryClient = new _reactquery.QueryClient();
describe('Login Page', ()=>{
    beforeEach(()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: _store.store,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            })
        }));
    });
    it('renders the logo', ()=>{
        const logo = _react.screen.getByAltText('Pattern50 Logo');
        expect(logo).toBeInTheDocument();
    });
    it('renders the title', ()=>{
        const title = _react.screen.getByRole('heading', {
            name: /login/i
        });
        expect(title).toBeInTheDocument();
    });
    it('calls signIn with Google provider on Google button click', async ()=>{
        const googleButton = _react.screen.getByText('Continue with Google');
        _react.fireEvent.click(googleButton);
        const { signIn } = require('next-auth/react');
        expect(signIn).toHaveBeenCalledWith('google', {
            redirect: false
        });
    });
    it('calls signIn with credentials on login button click', async ()=>{
        const loginButton = _react.screen.getByRole('button', {
            name: /login/i
        });
        _react.fireEvent.click(loginButton);
        const { signIn } = require('next-auth/react');
        expect(signIn).toHaveBeenCalledWith('credentials', {
            redirect: false,
            email: '',
            password: ''
        });
    });
    it('handles axios mock call', async ()=>{
        const axiosMock = require('axios');
        await axiosMock.post('http://192.168.0.158:8000/auth/login', {
            email: 'test@example.com',
            password: 'password123'
        });
        expect(axiosMock.post).toHaveBeenCalledWith('http://192.168.0.158:8000/auth/login', {
            email: 'test@example.com',
            password: 'password123'
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVXNlclxcT25lRHJpdmVcXERlc2t0b3BcXDZzZW5zZUhRLUhpcmVYLWNsaWVudFxcX190ZXN0X19cXGxvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvc3RvcmUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL2FwcC8oYXV0aCkvbG9naW4vcGFnZSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBNb2NrIE5leHRBdXRoIGFuZCBpdHMgbWV0aG9kc1xuamVzdC5tb2NrKCduZXh0LWF1dGgvcmVhY3QnLCAoKSA9PiAoe1xuICB1c2VTZXNzaW9uOiBqZXN0LmZuKCgpID0+ICh7IGRhdGE6IG51bGwsIHN0YXR1czogJ3VuYXV0aGVudGljYXRlZCcgfSkpLFxuICBzaWduSW46IGplc3QuZm4oKSxcbiAgc2lnbk91dDogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJ25leHQtYXV0aC9wcm92aWRlcnMvZ29vZ2xlJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIGlkOiAnZ29vZ2xlJyxcbiAgICBuYW1lOiAnR29vZ2xlJyxcbiAgICB0eXBlOiAnb2F1dGgnLFxuICAgIGNsaWVudElkOiAnbW9jay1jbGllbnQtaWQnLFxuICAgIGNsaWVudFNlY3JldDogJ21vY2stY2xpZW50LXNlY3JldCcsXG4gIH0pKSxcbn0pKTtcblxuamVzdC5tb2NrKCdheGlvcycsICgpID0+ICh7XG4gIHBvc3Q6IGplc3QuZm4oKCkgPT5cbiAgICBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgZGF0YToge1xuICAgICAgICB0b2tlbnM6IHtcbiAgICAgICAgICBhY2Nlc3NfdG9rZW46ICdtb2NrLWFjY2Vzcy10b2tlbicsXG4gICAgICAgICAgcmVmcmVzaF90b2tlbjogJ21vY2stcmVmcmVzaC10b2tlbicsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG4gICksXG59KSk7XG5cbmNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KCk7XG5cbmRlc2NyaWJlKCdMb2dpbiBQYWdlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICAgICAgPExvZ2luIC8+XG4gICAgICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGxvZ28nLCAoKSA9PiB7XG4gICAgY29uc3QgbG9nbyA9IHNjcmVlbi5nZXRCeUFsdFRleHQoJ1BhdHRlcm41MCBMb2dvJyk7XG4gICAgZXhwZWN0KGxvZ28pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSB0aXRsZScsICgpID0+IHtcbiAgICBjb25zdCB0aXRsZSA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IG5hbWU6IC9sb2dpbi9pIH0pO1xuICAgIGV4cGVjdCh0aXRsZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIHNpZ25JbiB3aXRoIEdvb2dsZSBwcm92aWRlciBvbiBHb29nbGUgYnV0dG9uIGNsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGdvb2dsZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ0NvbnRpbnVlIHdpdGggR29vZ2xlJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGdvb2dsZUJ1dHRvbik7XG5cbiAgICBjb25zdCB7IHNpZ25JbiB9ID0gcmVxdWlyZSgnbmV4dC1hdXRoL3JlYWN0Jyk7XG4gICAgZXhwZWN0KHNpZ25JbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2dvb2dsZScsIHsgcmVkaXJlY3Q6IGZhbHNlIH0pO1xuICB9KTtcblxuICBpdCgnY2FsbHMgc2lnbkluIHdpdGggY3JlZGVudGlhbHMgb24gbG9naW4gYnV0dG9uIGNsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGxvZ2luQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvbG9naW4vaSB9KTtcbiAgICBmaXJlRXZlbnQuY2xpY2sobG9naW5CdXR0b24pO1xuXG4gICAgY29uc3QgeyBzaWduSW4gfSA9IHJlcXVpcmUoJ25leHQtYXV0aC9yZWFjdCcpO1xuICAgIGV4cGVjdChzaWduSW4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdjcmVkZW50aWFscycsIHtcbiAgICAgIHJlZGlyZWN0OiBmYWxzZSxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgYXhpb3MgbW9jayBjYWxsJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGF4aW9zTW9jayA9IHJlcXVpcmUoJ2F4aW9zJyk7XG4gICAgYXdhaXQgYXhpb3NNb2NrLnBvc3QoJ2h0dHA6Ly8xOTIuMTY4LjAuMTU4OjgwMDAvYXV0aC9sb2dpbicsIHtcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICB9KTtcblxuICAgIGV4cGVjdChheGlvc01vY2sucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAnaHR0cDovLzE5Mi4xNjguMC4xNTg6ODAwMC9hdXRoL2xvZ2luJyxcbiAgICAgIHsgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJywgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycgfSxcbiAgICAgIHsgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gfVxuICAgICk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VTZXNzaW9uIiwiZm4iLCJkYXRhIiwic3RhdHVzIiwic2lnbkluIiwic2lnbk91dCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaWQiLCJuYW1lIiwidHlwZSIsImNsaWVudElkIiwiY2xpZW50U2VjcmV0IiwicG9zdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidG9rZW5zIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaF90b2tlbiIsInF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZW5kZXIiLCJQcm92aWRlciIsInN0b3JlIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNsaWVudCIsIkxvZ2luIiwiaXQiLCJsb2dvIiwic2NyZWVuIiwiZ2V0QnlBbHRUZXh0IiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0aXRsZSIsImdldEJ5Um9sZSIsImdvb2dsZUJ1dHRvbiIsImdldEJ5VGV4dCIsImZpcmVFdmVudCIsImNsaWNrIiwicmVxdWlyZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicmVkaXJlY3QiLCJsb2dpbkJ1dHRvbiIsImVtYWlsIiwicGFzc3dvcmQiLCJheGlvc01vY2siLCJoZWFkZXJzIl0sIm1hcHBpbmdzIjoiO0FBUUEsZ0NBQWdDO0FBQ2hDQSxLQUFLQyxJQUFJLENBQUMsbUJBQW1CLElBQU8sQ0FBQTtRQUNsQ0MsWUFBWUYsS0FBS0csRUFBRSxDQUFDLElBQU8sQ0FBQTtnQkFBRUMsTUFBTTtnQkFBTUMsUUFBUTtZQUFrQixDQUFBO1FBQ25FQyxRQUFRTixLQUFLRyxFQUFFO1FBQ2ZJLFNBQVNQLEtBQUtHLEVBQUU7SUFDbEIsQ0FBQTtBQUVBSCxLQUFLQyxJQUFJLENBQUMsOEJBQThCLElBQU8sQ0FBQTtRQUM3Q08sWUFBWTtRQUNaQyxTQUFTVCxLQUFLRyxFQUFFLENBQUMsSUFBTyxDQUFBO2dCQUN0Qk8sSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkMsTUFBTTtnQkFDTkMsVUFBVTtnQkFDVkMsY0FBYztZQUNoQixDQUFBO0lBQ0YsQ0FBQTtBQUVBZCxLQUFLQyxJQUFJLENBQUMsU0FBUyxJQUFPLENBQUE7UUFDeEJjLE1BQU1mLEtBQUtHLEVBQUUsQ0FBQyxJQUNaYSxRQUFRQyxPQUFPLENBQUM7Z0JBQ2RiLE1BQU07b0JBQ0pjLFFBQVE7d0JBQ05DLGNBQWM7d0JBQ2RDLGVBQWU7b0JBQ2pCO2dCQUNGO1lBQ0Y7SUFFSixDQUFBOzs7OztRQXJDTzt1QkFDbUM7NEJBQ2pCOzRCQUN3Qjt1QkFDM0I7NkRBQ0o7Ozs7OztBQWtDbEIsTUFBTUMsY0FBYyxJQUFJQyx1QkFBVztBQUVuQ0MsU0FBUyxjQUFjO0lBQ3JCQyxXQUFXO1FBQ1RDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLG9CQUFRO1lBQUNDLE9BQU9BLFlBQUs7c0JBQ3BCLGNBQUEscUJBQUNDLCtCQUFtQjtnQkFBQ0MsUUFBUVI7MEJBQzNCLGNBQUEscUJBQUNTLGFBQUs7OztJQUlkO0lBRUFDLEdBQUcsb0JBQW9CO1FBQ3JCLE1BQU1DLE9BQU9DLGFBQU0sQ0FBQ0MsWUFBWSxDQUFDO1FBQ2pDQyxPQUFPSCxNQUFNSSxpQkFBaUI7SUFDaEM7SUFFQUwsR0FBRyxxQkFBcUI7UUFDdEIsTUFBTU0sUUFBUUosYUFBTSxDQUFDSyxTQUFTLENBQUMsV0FBVztZQUFFM0IsTUFBTTtRQUFTO1FBQzNEd0IsT0FBT0UsT0FBT0QsaUJBQWlCO0lBQ2pDO0lBRUFMLEdBQUcsNERBQTREO1FBQzdELE1BQU1RLGVBQWVOLGFBQU0sQ0FBQ08sU0FBUyxDQUFDO1FBQ3RDQyxnQkFBUyxDQUFDQyxLQUFLLENBQUNIO1FBRWhCLE1BQU0sRUFBRWpDLE1BQU0sRUFBRSxHQUFHcUMsUUFBUTtRQUMzQlIsT0FBTzdCLFFBQVFzQyxvQkFBb0IsQ0FBQyxVQUFVO1lBQUVDLFVBQVU7UUFBTTtJQUNsRTtJQUVBZCxHQUFHLHVEQUF1RDtRQUN4RCxNQUFNZSxjQUFjYixhQUFNLENBQUNLLFNBQVMsQ0FBQyxVQUFVO1lBQUUzQixNQUFNO1FBQVM7UUFDaEU4QixnQkFBUyxDQUFDQyxLQUFLLENBQUNJO1FBRWhCLE1BQU0sRUFBRXhDLE1BQU0sRUFBRSxHQUFHcUMsUUFBUTtRQUMzQlIsT0FBTzdCLFFBQVFzQyxvQkFBb0IsQ0FBQyxlQUFlO1lBQ2pEQyxVQUFVO1lBQ1ZFLE9BQU87WUFDUEMsVUFBVTtRQUNaO0lBQ0Y7SUFFQWpCLEdBQUcsMkJBQTJCO1FBQzVCLE1BQU1rQixZQUFZTixRQUFRO1FBQzFCLE1BQU1NLFVBQVVsQyxJQUFJLENBQUMsd0NBQXdDO1lBQzNEZ0MsT0FBTztZQUNQQyxVQUFVO1FBQ1o7UUFFQWIsT0FBT2MsVUFBVWxDLElBQUksRUFBRTZCLG9CQUFvQixDQUN6Qyx3Q0FDQTtZQUFFRyxPQUFPO1lBQW9CQyxVQUFVO1FBQWMsR0FDckQ7WUFBRUUsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7UUFBRTtJQUV0RDtBQUNGIn0=