80bb538da7d70ed6020213543f7a480e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Input", {
    enumerable: true,
    get: function() {
        return Input;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _utils = require("../../lib/utils");
const _reacthookform = require("react-hook-form");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Input = /*#__PURE__*/ _react.forwardRef(({ className, control, name, errors, type = 'text', ...props }, ref)=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.Controller, {
        control: control,
        name: name,
        render: ({ field })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        ...field,
                        value: field?.value || '',
                        type: type,
                        className: (0, _utils.cn)('border-input focus-visible:ring-ring flex h-9 w-full rounded-md border bg-transparent py-1 pl-3 pr-10 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-subHeading focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50', {
                            'border-errorColor focus-visible:ring-errorColor/50': errors[name]?.message
                        }, className),
                        ref: ref,
                        ...props
                    }),
                    errors && errors[name] && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "absolute mt-1 flex items-center text-sm font-medium text-red-500",
                        children: errors[name].message
                    })
                ]
            })
    });
});
Input.displayName = 'Input';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVXNlclxcT25lRHJpdmVcXERlc2t0b3BcXDZzZW5zZUhRLUhpcmVYLWNsaWVudFxcY29tcG9uZW50c1xcdWlcXGlucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJztcbmltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IHsgV2FybmluZyB9IGZyb20gJ0BwaG9zcGhvci1pY29ucy9yZWFjdCc7XG5cbmludGVyZmFjZSBJbnB1dFByb3BzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50UHJvcHM8J2lucHV0Jz4ge1xuICBjb250cm9sOiBhbnk7XG4gIG5hbWU6IHN0cmluZztcbiAgZXJyb3JzPzogYW55O1xufVxuXG5jb25zdCBJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTElucHV0RWxlbWVudCwgSW5wdXRQcm9wcz4oXG4gICh7IGNsYXNzTmFtZSwgY29udHJvbCwgbmFtZSwgZXJyb3JzLCB0eXBlID0gJ3RleHQnLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgcmVuZGVyPXsoeyBmaWVsZCB9KSA9PiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JlbGF0aXZlJz5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICAgIHZhbHVlPXtmaWVsZD8udmFsdWUgfHwgJyd9XG4gICAgICAgICAgICAgIHR5cGU9e3R5cGV9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICAgICAgICAgICAgJ2JvcmRlci1pbnB1dCBmb2N1cy12aXNpYmxlOnJpbmctcmluZyBmbGV4IGgtOSB3LWZ1bGwgcm91bmRlZC1tZCBib3JkZXIgYmctdHJhbnNwYXJlbnQgcHktMSBwbC0zIHByLTEwIHRleHQtc20gc2hhZG93LXNtIHRyYW5zaXRpb24tY29sb3JzIGZpbGU6Ym9yZGVyLTAgZmlsZTpiZy10cmFuc3BhcmVudCBmaWxlOnRleHQtc20gZmlsZTpmb250LW1lZGl1bSBwbGFjZWhvbGRlcjp0ZXh0LXN1YkhlYWRpbmcgZm9jdXMtdmlzaWJsZTpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nLTEgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIGRpc2FibGVkOm9wYWNpdHktNTAnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICdib3JkZXItZXJyb3JDb2xvciBmb2N1cy12aXNpYmxlOnJpbmctZXJyb3JDb2xvci81MCc6XG4gICAgICAgICAgICAgICAgICAgIGVycm9yc1tuYW1lXT8ubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtlcnJvcnMgJiYgZXJyb3JzW25hbWVdICYmIChcbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdhYnNvbHV0ZSBtdC0xIGZsZXggaXRlbXMtY2VudGVyIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1yZWQtNTAwJz5cbiAgICAgICAgICAgICAgICB7ZXJyb3JzW25hbWVdLm1lc3NhZ2V9XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbklucHV0LmRpc3BsYXlOYW1lID0gJ0lucHV0JztcblxuZXhwb3J0IHsgSW5wdXQgfTtcbiJdLCJuYW1lcyI6WyJJbnB1dCIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsImNsYXNzTmFtZSIsImNvbnRyb2wiLCJuYW1lIiwiZXJyb3JzIiwidHlwZSIsInByb3BzIiwicmVmIiwiQ29udHJvbGxlciIsInJlbmRlciIsImZpZWxkIiwiZGl2IiwiaW5wdXQiLCJ2YWx1ZSIsImNuIiwibWVzc2FnZSIsInAiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFnRFNBOzs7ZUFBQUE7Ozs7K0RBaERjO3VCQUNKOytCQUNROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTM0IsTUFBTUEsc0JBQVFDLE9BQU1DLFVBQVUsQ0FDNUIsQ0FBQyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sTUFBTSxFQUFFLEdBQUdDLE9BQU8sRUFBRUM7SUFDOUQscUJBQ0UscUJBQUNDLHlCQUFVO1FBQ1ROLFNBQVNBO1FBQ1RDLE1BQU1BO1FBQ05NLFFBQVEsQ0FBQyxFQUFFQyxLQUFLLEVBQUUsaUJBQ2hCLHNCQUFDQztnQkFBSVYsV0FBVTs7a0NBQ2IscUJBQUNXO3dCQUNFLEdBQUdGLEtBQUs7d0JBQ1RHLE9BQU9ILE9BQU9HLFNBQVM7d0JBQ3ZCUixNQUFNQTt3QkFDTkosV0FBV2EsSUFBQUEsU0FBRSxFQUNYLHlVQUNBOzRCQUNFLHNEQUNFVixNQUFNLENBQUNELEtBQUssRUFBRVk7d0JBQ2xCLEdBQ0FkO3dCQUVGTSxLQUFLQTt3QkFDSixHQUFHRCxLQUFLOztvQkFFVkYsVUFBVUEsTUFBTSxDQUFDRCxLQUFLLGtCQUNyQixxQkFBQ2E7d0JBQUVmLFdBQVU7a0NBQ1ZHLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDWSxPQUFPOzs7OztBQU9uQztBQUdGakIsTUFBTW1CLFdBQVcsR0FBRyJ9