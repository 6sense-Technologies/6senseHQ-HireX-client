ece2928419895107e99e34e96c267261
"use strict";
// Mock NextAuth and providers
jest.mock('next-auth', ()=>({
        __esModule: true,
        default: jest.fn(()=>({
                handlers: jest.fn(),
                signIn: jest.fn(),
                signOut: jest.fn()
            }))
    }));
jest.mock('next-auth/providers/google', ()=>({
        __esModule: true,
        default: jest.fn(()=>({
                id: 'google',
                name: 'Google',
                type: 'oauth',
                clientId: 'mock-client-id',
                clientSecret: 'mock-client-secret'
            }))
    }));
jest.mock('next-auth/providers/credentials', ()=>({
        __esModule: true,
        default: jest.fn(()=>({
                id: 'credentials',
                name: 'Credentials',
                credentials: {
                    email: {
                        label: 'Email',
                        type: 'text',
                        placeholder: 'example@example.com'
                    },
                    password: {
                        label: 'Password',
                        type: 'password'
                    }
                },
                authorize: jest.fn(()=>({
                        email: 'test@example.com',
                        accessToken: 'mock-access-token',
                        refreshToken: 'mock-refresh-token'
                    }))
            }))
    }));
jest.mock('axios', ()=>({
        post: jest.fn(()=>Promise.resolve({
                data: {
                    tokens: {
                        access_token: 'mock-access-token',
                        refresh_token: 'mock-refresh-token'
                    }
                }
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _store = require("../store/store");
const _page = /*#__PURE__*/ _interop_require_default(require("../app/(auth)/login/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryClient = new _reactquery.QueryClient();
describe('Login Page', ()=>{
    beforeEach(()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: _store.store,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            })
        }));
    });
    it('renders the logo', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: _store.store,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
        }));
        const logo = await _react.screen.findByAltText('HireX Logo');
        expect(logo).toBeInTheDocument();
    });
// it('renders the title', () => {
//   const title = screen.getByRole('heading', { name: /login/i });
//   expect(title).toBeInTheDocument();
// });
// it('calls signIn with Google provider on Google button click', async () => {
//   const googleButton = screen.getByText('Continue with Google');
//   fireEvent.click(googleButton);
//   const { signIn } = require('next-auth');
//   expect(signIn).toHaveBeenCalledWith('google');
// });
// it('calls signIn with credentials on login button click', async () => {
//   const loginButton = screen.getByRole('button', { name: /login/i });
//   fireEvent.click(loginButton);
//   const { signIn } = require('next-auth');
//   expect(signIn).toHaveBeenCalledWith('credentials', {
//     redirect: false,
//     email: '',
//     password: '',
//   });
// });
// it('handles axios mock call', async () => {
//   const axiosMock = require('axios');
//   await axiosMock.post('http://192.168.0.158:8000/auth/login', {
//     email: 'test@example.com',
//     password: 'password123',
//   });
//   expect(axiosMock.post).toHaveBeenCalledWith(
//     'http://192.168.0.158:8000/auth/login',
//     { email: 'test@example.com', password: 'password123' },
//     { headers: { 'Content-Type': 'application/json' } }
//   );
// });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVXNlclxcT25lRHJpdmVcXERlc2t0b3BcXDZzZW5zZUhRLUhpcmVYLWNsaWVudFxcX190ZXN0X19cXGxvZ2luLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvc3RvcmUnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4uL2FwcC8oYXV0aCkvbG9naW4vcGFnZSc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBNb2NrIE5leHRBdXRoIGFuZCBwcm92aWRlcnNcbmplc3QubW9jaygnbmV4dC1hdXRoJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogamVzdC5mbigoKSA9PiAoe1xuICAgIGhhbmRsZXJzOiBqZXN0LmZuKCksXG4gICAgc2lnbkluOiBqZXN0LmZuKCksXG4gICAgc2lnbk91dDogamVzdC5mbigpLFxuICB9KSksXG59KSk7XG5cbmplc3QubW9jaygnbmV4dC1hdXRoL3Byb3ZpZGVycy9nb29nbGUnLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgaWQ6ICdnb29nbGUnLFxuICAgIG5hbWU6ICdHb29nbGUnLFxuICAgIHR5cGU6ICdvYXV0aCcsXG4gICAgY2xpZW50SWQ6ICdtb2NrLWNsaWVudC1pZCcsXG4gICAgY2xpZW50U2VjcmV0OiAnbW9jay1jbGllbnQtc2VjcmV0JyxcbiAgfSkpLFxufSkpO1xuXG5qZXN0Lm1vY2soJ25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMnLCAoKSA9PiAoe1xuICBfX2VzTW9kdWxlOiB0cnVlLFxuICBkZWZhdWx0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgaWQ6ICdjcmVkZW50aWFscycsXG4gICAgbmFtZTogJ0NyZWRlbnRpYWxzJyxcbiAgICBjcmVkZW50aWFsczoge1xuICAgICAgZW1haWw6IHsgbGFiZWw6ICdFbWFpbCcsIHR5cGU6ICd0ZXh0JywgcGxhY2Vob2xkZXI6ICdleGFtcGxlQGV4YW1wbGUuY29tJyB9LFxuICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6ICdQYXNzd29yZCcsIHR5cGU6ICdwYXNzd29yZCcgfSxcbiAgICB9LFxuICAgIGF1dGhvcml6ZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgIGFjY2Vzc1Rva2VuOiAnbW9jay1hY2Nlc3MtdG9rZW4nLFxuICAgICAgcmVmcmVzaFRva2VuOiAnbW9jay1yZWZyZXNoLXRva2VuJyxcbiAgICB9KSksXG4gIH0pKSxcbn0pKTtcblxuamVzdC5tb2NrKCdheGlvcycsICgpID0+ICh7XG4gIHBvc3Q6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogeyB0b2tlbnM6IHsgYWNjZXNzX3Rva2VuOiAnbW9jay1hY2Nlc3MtdG9rZW4nLCByZWZyZXNoX3Rva2VuOiAnbW9jay1yZWZyZXNoLXRva2VuJyB9IH0gfSkpLFxufSkpO1xuXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCgpO1xuXG5kZXNjcmliZSgnTG9naW4gUGFnZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgICAgIDxMb2dpbiAvPlxuICAgICAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICAgICA8L1Byb3ZpZGVyPlxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBsb2dvJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICA8TG9naW4gLz5cbiAgICAgIDwvUHJvdmlkZXI+XG4gICAgKTtcbiAgICBjb25zdCBsb2dvID0gYXdhaXQgc2NyZWVuLmZpbmRCeUFsdFRleHQoJ0hpcmVYIExvZ28nKTtcbiAgICBleHBlY3QobG9nbykudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgLy8gaXQoJ3JlbmRlcnMgdGhlIHRpdGxlJywgKCkgPT4ge1xuICAvLyAgIGNvbnN0IHRpdGxlID0gc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbmFtZTogL2xvZ2luL2kgfSk7XG4gIC8vICAgZXhwZWN0KHRpdGxlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAvLyB9KTtcblxuICAvLyBpdCgnY2FsbHMgc2lnbkluIHdpdGggR29vZ2xlIHByb3ZpZGVyIG9uIEdvb2dsZSBidXR0b24gY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gIC8vICAgY29uc3QgZ29vZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnQ29udGludWUgd2l0aCBHb29nbGUnKTtcbiAgLy8gICBmaXJlRXZlbnQuY2xpY2soZ29vZ2xlQnV0dG9uKTtcbiAgLy8gICBjb25zdCB7IHNpZ25JbiB9ID0gcmVxdWlyZSgnbmV4dC1hdXRoJyk7XG4gIC8vICAgZXhwZWN0KHNpZ25JbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2dvb2dsZScpO1xuICAvLyB9KTtcblxuICAvLyBpdCgnY2FsbHMgc2lnbkluIHdpdGggY3JlZGVudGlhbHMgb24gbG9naW4gYnV0dG9uIGNsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgIGNvbnN0IGxvZ2luQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvbG9naW4vaSB9KTtcbiAgLy8gICBmaXJlRXZlbnQuY2xpY2sobG9naW5CdXR0b24pO1xuICAvLyAgIGNvbnN0IHsgc2lnbkluIH0gPSByZXF1aXJlKCduZXh0LWF1dGgnKTtcbiAgLy8gICBleHBlY3Qoc2lnbkluKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY3JlZGVudGlhbHMnLCB7XG4gIC8vICAgICByZWRpcmVjdDogZmFsc2UsXG4gIC8vICAgICBlbWFpbDogJycsXG4gIC8vICAgICBwYXNzd29yZDogJycsXG4gIC8vICAgfSk7XG4gIC8vIH0pO1xuXG4gIC8vIGl0KCdoYW5kbGVzIGF4aW9zIG1vY2sgY2FsbCcsIGFzeW5jICgpID0+IHtcbiAgLy8gICBjb25zdCBheGlvc01vY2sgPSByZXF1aXJlKCdheGlvcycpO1xuICAvLyAgIGF3YWl0IGF4aW9zTW9jay5wb3N0KCdodHRwOi8vMTkyLjE2OC4wLjE1ODo4MDAwL2F1dGgvbG9naW4nLCB7XG4gIC8vICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAvLyAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gIC8vICAgfSk7XG4gIC8vICAgZXhwZWN0KGF4aW9zTW9jay5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgLy8gICAgICdodHRwOi8vMTkyLjE2OC4wLjE1ODo4MDAwL2F1dGgvbG9naW4nLFxuICAvLyAgICAgeyBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLCBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyB9LFxuICAvLyAgICAgeyBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSB9XG4gIC8vICAgKTtcbiAgLy8gfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZm4iLCJoYW5kbGVycyIsInNpZ25JbiIsInNpZ25PdXQiLCJpZCIsIm5hbWUiLCJ0eXBlIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJwbGFjZWhvbGRlciIsInBhc3N3b3JkIiwiYXV0aG9yaXplIiwiYWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJwb3N0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwidG9rZW5zIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaF90b2tlbiIsInF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZW5kZXIiLCJQcm92aWRlciIsInN0b3JlIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNsaWVudCIsIkxvZ2luIiwiaXQiLCJsb2dvIiwic2NyZWVuIiwiZmluZEJ5QWx0VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50Il0sIm1hcHBpbmdzIjoiO0FBUUEsOEJBQThCO0FBQzlCQSxLQUFLQyxJQUFJLENBQUMsYUFBYSxJQUFPLENBQUE7UUFDNUJDLFlBQVk7UUFDWkMsU0FBU0gsS0FBS0ksRUFBRSxDQUFDLElBQU8sQ0FBQTtnQkFDdEJDLFVBQVVMLEtBQUtJLEVBQUU7Z0JBQ2pCRSxRQUFRTixLQUFLSSxFQUFFO2dCQUNmRyxTQUFTUCxLQUFLSSxFQUFFO1lBQ2xCLENBQUE7SUFDRixDQUFBO0FBRUFKLEtBQUtDLElBQUksQ0FBQyw4QkFBOEIsSUFBTyxDQUFBO1FBQzdDQyxZQUFZO1FBQ1pDLFNBQVNILEtBQUtJLEVBQUUsQ0FBQyxJQUFPLENBQUE7Z0JBQ3RCSSxJQUFJO2dCQUNKQyxNQUFNO2dCQUNOQyxNQUFNO2dCQUNOQyxVQUFVO2dCQUNWQyxjQUFjO1lBQ2hCLENBQUE7SUFDRixDQUFBO0FBRUFaLEtBQUtDLElBQUksQ0FBQyxtQ0FBbUMsSUFBTyxDQUFBO1FBQ2xEQyxZQUFZO1FBQ1pDLFNBQVNILEtBQUtJLEVBQUUsQ0FBQyxJQUFPLENBQUE7Z0JBQ3RCSSxJQUFJO2dCQUNKQyxNQUFNO2dCQUNOSSxhQUFhO29CQUNYQyxPQUFPO3dCQUFFQyxPQUFPO3dCQUFTTCxNQUFNO3dCQUFRTSxhQUFhO29CQUFzQjtvQkFDMUVDLFVBQVU7d0JBQUVGLE9BQU87d0JBQVlMLE1BQU07b0JBQVc7Z0JBQ2xEO2dCQUNBUSxXQUFXbEIsS0FBS0ksRUFBRSxDQUFDLElBQU8sQ0FBQTt3QkFDeEJVLE9BQU87d0JBQ1BLLGFBQWE7d0JBQ2JDLGNBQWM7b0JBQ2hCLENBQUE7WUFDRixDQUFBO0lBQ0YsQ0FBQTtBQUVBcEIsS0FBS0MsSUFBSSxDQUFDLFNBQVMsSUFBTyxDQUFBO1FBQ3hCb0IsTUFBTXJCLEtBQUtJLEVBQUUsQ0FBQyxJQUFNa0IsUUFBUUMsT0FBTyxDQUFDO2dCQUFFQyxNQUFNO29CQUFFQyxRQUFRO3dCQUFFQyxjQUFjO3dCQUFxQkMsZUFBZTtvQkFBcUI7Z0JBQUU7WUFBRTtJQUNySSxDQUFBOzs7OztRQWhETzt1QkFDbUM7NEJBQ2pCOzRCQUN3Qjt1QkFDM0I7NkRBQ0o7Ozs7OztBQTZDbEIsTUFBTUMsY0FBYyxJQUFJQyx1QkFBVztBQUVuQ0MsU0FBUyxjQUFjO0lBQ3JCQyxXQUFXO1FBQ1RDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLG9CQUFRO1lBQUNDLE9BQU9BLFlBQUs7c0JBQ3BCLGNBQUEscUJBQUNDLCtCQUFtQjtnQkFBQ0MsUUFBUVI7MEJBQzNCLGNBQUEscUJBQUNTLGFBQUs7OztJQUlkO0lBRUFDLEdBQUcsb0JBQW9CO1FBQ3JCTixJQUFBQSxhQUFNLGdCQUNKLHFCQUFDQyxvQkFBUTtZQUFDQyxPQUFPQSxZQUFLO3NCQUNwQixjQUFBLHFCQUFDRyxhQUFLOztRQUdWLE1BQU1FLE9BQU8sTUFBTUMsYUFBTSxDQUFDQyxhQUFhLENBQUM7UUFDeENDLE9BQU9ILE1BQU1JLGlCQUFpQjtJQUNoQztBQUVBLGtDQUFrQztBQUNsQyxtRUFBbUU7QUFDbkUsdUNBQXVDO0FBQ3ZDLE1BQU07QUFFTiwrRUFBK0U7QUFDL0UsbUVBQW1FO0FBQ25FLG1DQUFtQztBQUNuQyw2Q0FBNkM7QUFDN0MsbURBQW1EO0FBQ25ELE1BQU07QUFFTiwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLGtDQUFrQztBQUNsQyw2Q0FBNkM7QUFDN0MseURBQXlEO0FBQ3pELHVCQUF1QjtBQUN2QixpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCLFFBQVE7QUFDUixNQUFNO0FBRU4sOENBQThDO0FBQzlDLHdDQUF3QztBQUN4QyxtRUFBbUU7QUFDbkUsaUNBQWlDO0FBQ2pDLCtCQUErQjtBQUMvQixRQUFRO0FBQ1IsaURBQWlEO0FBQ2pELDhDQUE4QztBQUM5Qyw4REFBOEQ7QUFDOUQsMERBQTBEO0FBQzFELE9BQU87QUFDUCxNQUFNO0FBQ1IifQ==