677f1317334e19c042807b0636d9214b
"use strict";
jest.mock('@tanstack/react-query', ()=>{
    const originalModule = jest.requireActual('@tanstack/react-query');
    return {
        ...originalModule,
        useQuery: jest.fn()
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _store = require("../store/store");
const _page = /*#__PURE__*/ _interop_require_default(require("../app/(dashboards)/create-job/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryClient = new _reactquery.QueryClient();
describe('CreateJob Page', ()=>{
    beforeEach(()=>{
        _reactquery.useQuery.mockImplementation(({ queryKey })=>{
            if (queryKey[0] === 'jobpositions') {
                return {
                    data: [
                        {
                            jobPositionName: 'Developer'
                        },
                        {
                            jobPositionName: 'Designer'
                        }
                    ]
                };
            }
            if (queryKey[0] === 'departments') {
                return {
                    data: [
                        {
                            jobDepartmentName: 'Engineering'
                        },
                        {
                            jobDepartmentName: 'Design'
                        }
                    ]
                };
            }
            return {
                data: []
            };
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: _store.store,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            })
        }));
    });
    it('renders the sections of the page', ()=>{
        const sections = [
            'Job Information',
            'Interview Stages',
            'Job Responsibilities',
            'Ideal Candidate',
            'Status'
        ];
        sections.forEach((section)=>{
            expect(_react.screen.getByText(section)).toBeInTheDocument();
        });
    });
    it('renders the labels of the job information section', ()=>{
        const labels = [
            'Job Position',
            'Job Department (optional)',
            'Number of Vacancies'
        ];
        labels.forEach((label)=>{
            expect(_react.screen.getByText(label)).toBeInTheDocument();
        });
    });
    it('renders the job position dropdown', ()=>{
        const jobPositionDropdown = _react.screen.getByPlaceholderText('Select Job Position');
        expect(jobPositionDropdown).toBeInTheDocument();
    });
    it('renders the job department (optional) field dropdown', ()=>{
        const jobDepartmentDropdown = _react.screen.getByPlaceholderText('Select Job Department');
        expect(jobDepartmentDropdown).toBeInTheDocument();
    });
    it('renders the number of vacancies field placeholder', ()=>{
        const noOfVacancyPlaceholder = _react.screen.getByPlaceholderText('Enter number of vacancies');
        expect(noOfVacancyPlaceholder).toBeInTheDocument();
    });
    it('renders the interview stage section tables', ()=>{
        const interviewStageTable = _react.screen.getByRole('table');
        expect(interviewStageTable).toBeInTheDocument();
    });
    it('renders the interview stage section arrow buttons', ()=>{
        const moveUpButton = _react.screen.getByLabelText('Move stage up');
        const moveDownButton = _react.screen.getByLabelText('Move stage down');
        expect(moveUpButton).toBeInTheDocument();
        expect(moveDownButton).toBeInTheDocument();
    });
    it('renders the job responsibilities placeholder', ()=>{
        const jobResponsibilitiesPlaceholder = _react.screen.getByPlaceholderText('Type Job Responsibilities');
        expect(jobResponsibilitiesPlaceholder).toBeInTheDocument();
    });
    it('renders the resize icon', ()=>{
        const textArea = _react.screen.getByPlaceholderText('Type Job Responsibilities');
        expect(textArea).toHaveClass('resize');
    });
    it('renders the add button in ideal candidate section', ()=>{
        const addButton = _react.screen.getByText('Add');
        expect(addButton).toBeInTheDocument();
    });
    it('renders the status placeholder', ()=>{
        const statusPlaceholder = _react.screen.getByPlaceholderText('Enter status');
        expect(statusPlaceholder).toBeInTheDocument();
    });
    it('renders the footer section buttons', ()=>{
        const saveButton = _react.screen.getByText('Create');
        const cancelButton = _react.screen.getByText('Cancel');
        expect(saveButton).toBeInTheDocument();
        expect(cancelButton).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,