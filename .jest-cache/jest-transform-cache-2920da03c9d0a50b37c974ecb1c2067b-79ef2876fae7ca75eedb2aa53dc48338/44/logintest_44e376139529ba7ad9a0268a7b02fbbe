dad91baf1613b296cf124df95693a2a8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _page = /*#__PURE__*/ _interop_require_default(require("../app/(auth)/login/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Login Page', ()=>{
    beforeEach(()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
    });
    it('renders the logo', ()=>{
        const logo = _react.screen.getByAltText('Pattern50 Logo');
        expect(logo).toBeInTheDocument();
    });
    it('renders the title', ()=>{
        const title = _react.screen.getByText('Login');
        expect(title).toBeInTheDocument();
    });
    it('renders the subtitle', ()=>{
        const subtitle = _react.screen.getByText('Continue with pattern50');
        expect(subtitle).toBeInTheDocument();
    });
    it('renders the email label', ()=>{
        const emailLabel = _react.screen.getByLabelText('Email Address');
        expect(emailLabel).toBeInTheDocument();
    });
    it('renders the password label', ()=>{
        const passwordLabel = _react.screen.getByLabelText('Password');
        expect(passwordLabel).toBeInTheDocument();
    });
    it('renders the email placeholder', ()=>{
        const emailPlaceholder = _react.screen.getByPlaceholderText('Email Address');
        expect(emailPlaceholder).toBeInTheDocument();
    });
    it('renders the password placeholder', ()=>{
        const passwordPlaceholder = _react.screen.getByPlaceholderText('Password');
        expect(passwordPlaceholder).toBeInTheDocument();
    });
    it('renders the eye icon in default', ()=>{
        const eyeIcon = _react.screen.getByRole('button', {
            name: /eye/i
        });
        expect(eyeIcon).toBeInTheDocument();
    });
    it('toggles the eye icon visibility', ()=>{
        const eyeButton = _react.screen.getByRole('button', {
            name: /eye/i
        });
        _react.fireEvent.click(eyeButton);
        expect(_react.screen.getByRole('button', {
            name: /eye slash/i
        })).toBeInTheDocument();
        _react.fireEvent.click(_react.screen.getByRole('button', {
            name: /eye slash/i
        }));
        expect(_react.screen.getByRole('button', {
            name: /eye/i
        })).toBeInTheDocument();
    });
    it('renders the login button', ()=>{
        const loginButton = _react.screen.getByRole('button', {
            name: /login/i
        });
        expect(loginButton).toBeInTheDocument();
    });
    it('renders the Google button', ()=>{
        const googleButton = _react.screen.getByText('Sign in with Google');
        expect(googleButton).toBeInTheDocument();
    });
    it('renders the forgot password link', ()=>{
        const forgotPasswordLink = _react.screen.getByText('Forgot password?');
        expect(forgotPasswordLink).toBeInTheDocument();
    });
    it('renders the text below the login button', ()=>{
        const orDivider = _react.screen.getByText('OR');
        expect(orDivider).toBeInTheDocument();
    });
    it('renders the Google button on the left of the Google sign-in button', ()=>{
        const googleButton = _react.screen.getByText('Sign in with Google');
        expect(googleButton).toBeInTheDocument();
    });
    it('checks what happens when user hovers on the sign-in button', ()=>{
        const loginButton = _react.screen.getByRole('button', {
            name: /login/i
        });
        _react.fireEvent.mouseOver(loginButton);
        expect(loginButton).toHaveClass('hover');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xca2hhbmFcXE9uZURyaXZlXFxDb21wdXRlciBGaWxlc1xcRGVza3RvcFxcNnNlbnNlSFEtSGlyZVgtY2xpZW50XFxfX3Rlc3RfX1xcbG9naW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuXHJcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7XHJcbmltcG9ydCBMb2dpbiBmcm9tICcuLi9hcHAvKGF1dGgpL2xvZ2luL3BhZ2UnO1xyXG5cclxuXHJcblxyXG5cclxuZGVzY3JpYmUoJ0xvZ2luIFBhZ2UnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgICAgIDxMb2dpbiAvPlxyXG5cclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBsb2dvJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbG9nbyA9IHNjcmVlbi5nZXRCeUFsdFRleHQoJ1BhdHRlcm41MCBMb2dvJyk7XHJcbiAgICBleHBlY3QobG9nbykudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIHRpdGxlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdGl0bGUgPSBzY3JlZW4uZ2V0QnlUZXh0KCdMb2dpbicpO1xyXG4gICAgZXhwZWN0KHRpdGxlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgc3VidGl0bGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzdWJ0aXRsZSA9IHNjcmVlbi5nZXRCeVRleHQoJ0NvbnRpbnVlIHdpdGggcGF0dGVybjUwJyk7XHJcbiAgICBleHBlY3Qoc3VidGl0bGUpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBlbWFpbCBsYWJlbCcsICgpID0+IHtcclxuICAgIGNvbnN0IGVtYWlsTGFiZWwgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoJ0VtYWlsIEFkZHJlc3MnKTtcclxuICAgIGV4cGVjdChlbWFpbExhYmVsKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgcGFzc3dvcmQgbGFiZWwnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBwYXNzd29yZExhYmVsID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KCdQYXNzd29yZCcpO1xyXG4gICAgZXhwZWN0KHBhc3N3b3JkTGFiZWwpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBlbWFpbCBwbGFjZWhvbGRlcicsICgpID0+IHtcclxuICAgIGNvbnN0IGVtYWlsUGxhY2Vob2xkZXIgPSBzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoJ0VtYWlsIEFkZHJlc3MnKTtcclxuICAgIGV4cGVjdChlbWFpbFBsYWNlaG9sZGVyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgcGFzc3dvcmQgcGxhY2Vob2xkZXInLCAoKSA9PiB7XHJcbiAgICBjb25zdCBwYXNzd29yZFBsYWNlaG9sZGVyID0gc2NyZWVuLmdldEJ5UGxhY2Vob2xkZXJUZXh0KCdQYXNzd29yZCcpO1xyXG4gICAgZXhwZWN0KHBhc3N3b3JkUGxhY2Vob2xkZXIpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBleWUgaWNvbiBpbiBkZWZhdWx0JywgKCkgPT4ge1xyXG4gICAgY29uc3QgZXllSWNvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2V5ZS9pIH0pO1xyXG4gICAgZXhwZWN0KGV5ZUljb24pLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCd0b2dnbGVzIHRoZSBleWUgaWNvbiB2aXNpYmlsaXR5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgZXllQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvZXllL2kgfSk7XHJcbiAgICBmaXJlRXZlbnQuY2xpY2soZXllQnV0dG9uKTtcclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9leWUgc2xhc2gvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9leWUgc2xhc2gvaSB9KSk7XHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvZXllL2kgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBsb2dpbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsb2dpbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2xvZ2luL2kgfSk7XHJcbiAgICBleHBlY3QobG9naW5CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBHb29nbGUgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZ29vZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnU2lnbiBpbiB3aXRoIEdvb2dsZScpO1xyXG4gICAgZXhwZWN0KGdvb2dsZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIGZvcmdvdCBwYXNzd29yZCBsaW5rJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZm9yZ290UGFzc3dvcmRMaW5rID0gc2NyZWVuLmdldEJ5VGV4dCgnRm9yZ290IHBhc3N3b3JkPycpO1xyXG4gICAgZXhwZWN0KGZvcmdvdFBhc3N3b3JkTGluaykudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIHRleHQgYmVsb3cgdGhlIGxvZ2luIGJ1dHRvbicsICgpID0+IHtcclxuICAgIGNvbnN0IG9yRGl2aWRlciA9IHNjcmVlbi5nZXRCeVRleHQoJ09SJyk7XHJcbiAgICBleHBlY3Qob3JEaXZpZGVyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgR29vZ2xlIGJ1dHRvbiBvbiB0aGUgbGVmdCBvZiB0aGUgR29vZ2xlIHNpZ24taW4gYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZ29vZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnU2lnbiBpbiB3aXRoIEdvb2dsZScpO1xyXG4gICAgZXhwZWN0KGdvb2dsZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2NoZWNrcyB3aGF0IGhhcHBlbnMgd2hlbiB1c2VyIGhvdmVycyBvbiB0aGUgc2lnbi1pbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsb2dpbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2xvZ2luL2kgfSk7XHJcbiAgICBmaXJlRXZlbnQubW91c2VPdmVyKGxvZ2luQnV0dG9uKTtcclxuICAgIGV4cGVjdChsb2dpbkJ1dHRvbikudG9IYXZlQ2xhc3MoJ2hvdmVyJyk7XHJcbiAgfSk7XHJcbn0pOyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJyZW5kZXIiLCJMb2dpbiIsIml0IiwibG9nbyIsInNjcmVlbiIsImdldEJ5QWx0VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwidGl0bGUiLCJnZXRCeVRleHQiLCJzdWJ0aXRsZSIsImVtYWlsTGFiZWwiLCJnZXRCeUxhYmVsVGV4dCIsInBhc3N3b3JkTGFiZWwiLCJlbWFpbFBsYWNlaG9sZGVyIiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJwYXNzd29yZFBsYWNlaG9sZGVyIiwiZXllSWNvbiIsImdldEJ5Um9sZSIsIm5hbWUiLCJleWVCdXR0b24iLCJmaXJlRXZlbnQiLCJjbGljayIsImxvZ2luQnV0dG9uIiwiZ29vZ2xlQnV0dG9uIiwiZm9yZ290UGFzc3dvcmRMaW5rIiwib3JEaXZpZGVyIiwibW91c2VPdmVyIiwidG9IYXZlQ2xhc3MiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQU87dUJBQ21DOzZEQUt4Qjs7Ozs7O0FBS2xCQSxTQUFTLGNBQWM7SUFDckJDLFdBQVc7UUFDVEMsSUFBQUEsYUFBTSxnQkFDRCxxQkFBQ0MsYUFBSztJQUdiO0lBRUFDLEdBQUcsb0JBQW9CO1FBQ3JCLE1BQU1DLE9BQU9DLGFBQU0sQ0FBQ0MsWUFBWSxDQUFDO1FBQ2pDQyxPQUFPSCxNQUFNSSxpQkFBaUI7SUFDaEM7SUFFQUwsR0FBRyxxQkFBcUI7UUFDdEIsTUFBTU0sUUFBUUosYUFBTSxDQUFDSyxTQUFTLENBQUM7UUFDL0JILE9BQU9FLE9BQU9ELGlCQUFpQjtJQUNqQztJQUVBTCxHQUFHLHdCQUF3QjtRQUN6QixNQUFNUSxXQUFXTixhQUFNLENBQUNLLFNBQVMsQ0FBQztRQUNsQ0gsT0FBT0ksVUFBVUgsaUJBQWlCO0lBQ3BDO0lBRUFMLEdBQUcsMkJBQTJCO1FBQzVCLE1BQU1TLGFBQWFQLGFBQU0sQ0FBQ1EsY0FBYyxDQUFDO1FBQ3pDTixPQUFPSyxZQUFZSixpQkFBaUI7SUFDdEM7SUFFQUwsR0FBRyw4QkFBOEI7UUFDL0IsTUFBTVcsZ0JBQWdCVCxhQUFNLENBQUNRLGNBQWMsQ0FBQztRQUM1Q04sT0FBT08sZUFBZU4saUJBQWlCO0lBQ3pDO0lBRUFMLEdBQUcsaUNBQWlDO1FBQ2xDLE1BQU1ZLG1CQUFtQlYsYUFBTSxDQUFDVyxvQkFBb0IsQ0FBQztRQUNyRFQsT0FBT1Esa0JBQWtCUCxpQkFBaUI7SUFDNUM7SUFFQUwsR0FBRyxvQ0FBb0M7UUFDckMsTUFBTWMsc0JBQXNCWixhQUFNLENBQUNXLG9CQUFvQixDQUFDO1FBQ3hEVCxPQUFPVSxxQkFBcUJULGlCQUFpQjtJQUMvQztJQUVBTCxHQUFHLG1DQUFtQztRQUNwQyxNQUFNZSxVQUFVYixhQUFNLENBQUNjLFNBQVMsQ0FBQyxVQUFVO1lBQUVDLE1BQU07UUFBTztRQUMxRGIsT0FBT1csU0FBU1YsaUJBQWlCO0lBQ25DO0lBRUFMLEdBQUcsbUNBQW1DO1FBQ3BDLE1BQU1rQixZQUFZaEIsYUFBTSxDQUFDYyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQU87UUFDNURFLGdCQUFTLENBQUNDLEtBQUssQ0FBQ0Y7UUFDaEJkLE9BQU9GLGFBQU0sQ0FBQ2MsU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFhLElBQUlaLGlCQUFpQjtRQUM1RWMsZ0JBQVMsQ0FBQ0MsS0FBSyxDQUFDbEIsYUFBTSxDQUFDYyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQWE7UUFDaEViLE9BQU9GLGFBQU0sQ0FBQ2MsU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFPLElBQUlaLGlCQUFpQjtJQUN4RTtJQUVBTCxHQUFHLDRCQUE0QjtRQUM3QixNQUFNcUIsY0FBY25CLGFBQU0sQ0FBQ2MsU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFTO1FBQ2hFYixPQUFPaUIsYUFBYWhCLGlCQUFpQjtJQUN2QztJQUVBTCxHQUFHLDZCQUE2QjtRQUM5QixNQUFNc0IsZUFBZXBCLGFBQU0sQ0FBQ0ssU0FBUyxDQUFDO1FBQ3RDSCxPQUFPa0IsY0FBY2pCLGlCQUFpQjtJQUN4QztJQUVBTCxHQUFHLG9DQUFvQztRQUNyQyxNQUFNdUIscUJBQXFCckIsYUFBTSxDQUFDSyxTQUFTLENBQUM7UUFDNUNILE9BQU9tQixvQkFBb0JsQixpQkFBaUI7SUFDOUM7SUFFQUwsR0FBRywyQ0FBMkM7UUFDNUMsTUFBTXdCLFlBQVl0QixhQUFNLENBQUNLLFNBQVMsQ0FBQztRQUNuQ0gsT0FBT29CLFdBQVduQixpQkFBaUI7SUFDckM7SUFFQUwsR0FBRyxzRUFBc0U7UUFDdkUsTUFBTXNCLGVBQWVwQixhQUFNLENBQUNLLFNBQVMsQ0FBQztRQUN0Q0gsT0FBT2tCLGNBQWNqQixpQkFBaUI7SUFDeEM7SUFFQUwsR0FBRyw4REFBOEQ7UUFDL0QsTUFBTXFCLGNBQWNuQixhQUFNLENBQUNjLFNBQVMsQ0FBQyxVQUFVO1lBQUVDLE1BQU07UUFBUztRQUNoRUUsZ0JBQVMsQ0FBQ00sU0FBUyxDQUFDSjtRQUNwQmpCLE9BQU9pQixhQUFhSyxXQUFXLENBQUM7SUFDbEM7QUFDRiJ9