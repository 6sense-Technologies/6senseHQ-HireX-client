3ad22bb734e6600017f500e2b321960b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@phosphor-icons/react");
const _react1 = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _interviewStageDropdown = /*#__PURE__*/ _interop_require_default(require("./interviewStageDropdown"));
const _reactquery = require("@tanstack/react-query");
const _JobApi = require("../../../../api/Job/JobApi");
const _cn = /*#__PURE__*/ _interop_require_default(require("../../../../utils/cn"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const interviewStageOptions = [
    {
        value: 'Online-Video',
        label: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
            className: "flex items-center justify-start gap-[4px] text-nowrap",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.VideoCamera, {
                    size: 16
                }),
                " Online"
            ]
        })
    },
    {
        value: 'Online-Voice',
        label: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
            className: "flex items-center justify-start gap-[4px] text-nowrap",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Phone, {
                    size: 16
                }),
                " Online"
            ]
        })
    },
    {
        value: 'Online-Quiz',
        label: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
            className: "flex items-center justify-start gap-[4px] text-nowrap",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.PuzzlePiece, {
                    size: 16
                }),
                " Online"
            ]
        })
    },
    {
        value: 'Offline',
        label: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
            className: "flex items-center justify-start gap-[4px] text-nowrap",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.UsersThree, {
                    size: 16
                }),
                " Offline"
            ]
        })
    }
];
const InterviewStage = ({ control, errors, setValue })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const [itemsLeft, setItemsLeft] = (0, _react1.useState)([]);
    const [itemsRight, setItemsRight] = (0, _react1.useState)([]);
    const [selectAll, setSelectAll] = (0, _react1.useState)(false);
    const [draggedItemLeft, setDraggedItemLeft] = (0, _react1.useState)(null);
    const [hoveredItemLeft, setHoveredItemLeft] = (0, _react1.useState)(null);
    const [draggedItemRight, setDraggedItemRight] = (0, _react1.useState)(null);
    const [hoveredItemRight, setHoveredItemRight] = (0, _react1.useState)(null);
    const [newItemLabel, setNewItemLabel] = (0, _react1.useState)('');
    const { data: interviewStages } = (0, _reactquery.useQuery)({
        queryKey: [
            'interviewStages'
        ],
        queryFn: ()=>(0, _JobApi.getInterviewStages)(),
        enabled: true
    });
    const interviewStageMutation = (0, _reactquery.useMutation)({
        mutationFn: _JobApi.handleCreateInterviewStage,
        onSuccess: ()=>{
            queryClient.invalidateQueries({
                queryKey: [
                    'interviewStages'
                ]
            });
        }
    });
    (0, _react1.useEffect)(()=>{
        if (interviewStages) {
            const formattedStages = interviewStages.map((stage)=>({
                    id: stage.interviewStageId,
                    label: stage.interviewStageName,
                    checked: itemsLeft.find((item)=>item.id === stage.interviewStageId)?.checked || false
                }));
            setItemsLeft(formattedStages);
        }
    }, [
        interviewStages
    ]);
    const handleSelectAll = ()=>{
        const newSelectAll = !selectAll;
        setSelectAll(newSelectAll);
        setItemsLeft(itemsLeft.map((item)=>({
                ...item,
                checked: newSelectAll
            })));
    };
    const handleCheckboxChange = (id)=>{
        const newItems = itemsLeft.map((item)=>item.id === id ? {
                ...item,
                checked: !item.checked
            } : item);
        setItemsLeft(newItems);
        if (newItems.some((item)=>!item.checked)) {
            setSelectAll(false);
        }
    };
    const handleMoveToRight = ()=>{
        const selectedItems = itemsLeft.filter((item)=>item.checked && !itemsRight.some((rightItem)=>rightItem.id === item.id));
        const newItemsRight = selectedItems.map((item)=>({
                id: item.id,
                label: item.label,
                interviewMedium: '',
                checked: item.checked
            }));
        setItemsRight([
            ...itemsRight,
            ...newItemsRight
        ]);
        setItemsLeft(itemsLeft.map((item)=>item.checked ? {
                ...item,
                checked: true
            } : item));
    };
    // Left Table Drag-and-Drop Functions
    const handleDragStartLeft = (item)=>{
        setDraggedItemLeft(item);
    };
    const handleDragOverLeft = (e, item)=>{
        e.preventDefault();
        setHoveredItemLeft(item);
    };
    const handleDropLeft = (e, dropItem)=>{
        e.preventDefault();
        if (draggedItemLeft && dropItem.id !== draggedItemLeft.id) {
            const newItems = itemsLeft.map((item)=>{
                if (item.id === dropItem.id) {
                    return draggedItemLeft;
                }
                if (item.id === draggedItemLeft.id) {
                    return dropItem;
                }
                return item;
            });
            setItemsLeft(newItems);
        }
        setDraggedItemLeft(null);
        setHoveredItemLeft(null);
    };
    // Right Table Drag-and-Drop Functions
    const handleDragStartRight = (item)=>{
        setDraggedItemRight(item);
    };
    const handleDragOverRight = (e, item)=>{
        e.preventDefault();
        setHoveredItemRight(item);
    };
    const handleDropRight = (e, dropItem)=>{
        e.preventDefault();
        if (draggedItemRight && dropItem.id !== draggedItemRight.id) {
            const newItems = itemsRight.map((item)=>{
                if (item.id === dropItem.id) {
                    return draggedItemRight;
                }
                if (item.id === draggedItemRight.id) {
                    return dropItem;
                }
                return item;
            });
            setItemsRight(newItems);
        }
        setDraggedItemRight(null);
        setHoveredItemRight(null);
    };
    const handleAddNewItem = ()=>{
        if (newItemLabel.trim() !== '') {
            interviewStageMutation.mutate({
                interviewStageName: newItemLabel
            });
            setNewItemLabel('');
        }
    };
    const removeItem = (id)=>{
        const newItemsRight = itemsRight.filter((item)=>item.id !== id);
        setItemsRight(newItemsRight);
        const newItemsLeft = itemsLeft.map((item)=>item.id === id ? {
                ...item,
                checked: false
            } : item);
        setItemsLeft(newItemsLeft);
        setSelectAll(false);
    };
    // Collected data from right table and formated the data as required
    (0, _react1.useEffect)(()=>{
        const formattedInterviewStages = itemsRight.map((item)=>({
                interviewStageName: item.label,
                interviewMedium: item.interviewMedium
            }));
        setValue('interviewStages', formattedInterviewStages);
    }, [
        itemsRight,
        setValue
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "mt-[32px] rounded-2xl bg-jobBg",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    className: "pl-[48px] pt-[38px] text-headingXXS font-semibold",
                    children: "Interview Stages"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex w-full items-center gap-[8px] pb-[38px] pl-[47px] pr-[38px] pt-[16px]",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "h-[200px] w-full overflow-y-auto lg:max-w-[409px] xl:max-w-[605px]",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
                            className: "w-full rounded-md bg-white lg:max-w-[405px] xl:max-w-[600px]",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("th", {
                                            className: "flex items-center gap-[30px] border-b py-[9px] pl-[17px]",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                                    type: "checkbox",
                                                    checked: selectAll,
                                                    onChange: handleSelectAll,
                                                    className: "h-3"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                    className: "text-twelve font-medium text-placeholderColor",
                                                    children: "Interview Options"
                                                })
                                            ]
                                        })
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("tbody", {
                                    children: [
                                        itemsLeft.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                                className: (0, _cn.default)({
                                                    'bg-blue-100 opacity-30': item.id === draggedItemLeft?.id,
                                                    'border-2': item.id === hoveredItemLeft?.id,
                                                    'border-gray-100': item.id !== hoveredItemLeft?.id
                                                }),
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("td", {
                                                    className: "flex items-center gap-[8px] border-b py-[9px] pl-[17px]",
                                                    children: [
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                                            type: "checkbox",
                                                            checked: item.checked,
                                                            onChange: ()=>handleCheckboxChange(item.id),
                                                            className: "h-3"
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                            draggable: true,
                                                            onDragStart: ()=>handleDragStartLeft(item),
                                                            onDragOver: (e)=>handleDragOverLeft(e, item),
                                                            onDrop: (e)=>handleDropLeft(e, item),
                                                            onDragLeave: ()=>setHoveredItemLeft(null),
                                                            className: "cursor-pointer",
                                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.DotsSixVertical, {
                                                                className: "text-lightGrayColor"
                                                            })
                                                        }),
                                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                            className: "text-twelve font-medium text-dropdownLabelColor",
                                                            children: item.label
                                                        })
                                                    ]
                                                })
                                            }, item.id)),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("td", {
                                                className: "flex items-center gap-[8px] pl-[17px]",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Plus, {
                                                        className: "cursor-pointer bg-white text-placeholderColor",
                                                        onClick: handleAddNewItem
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                                        type: "text",
                                                        name: "interviewStageName",
                                                        value: newItemLabel,
                                                        onChange: (e)=>setNewItemLabel(e.target.value),
                                                        placeholder: "Type Name...",
                                                        className: "w-full border-b py-[9px] pl-8 text-twelve placeholder:text-twelve placeholder:text-placeholderColor"
                                                    })
                                                ]
                                            })
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.ArrowRight, {
                            onClick: handleMoveToRight,
                            className: "cursor-pointer border"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "h-[200px] w-full overflow-y-auto lg:max-w-[655px] xl:max-w-[900px]",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
                            className: "w-full rounded-md bg-white lg:max-w-[650px] xl:max-w-[900px]",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                                        className: "border-b",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                                className: "flex max-w-[200px] justify-start py-[9px] pl-[40px]",
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                    className: "text-twelve font-medium text-placeholderColor",
                                                    children: "Interview Selected"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                                className: "text-start",
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                    className: "py-[9px] text-twelve font-medium text-placeholderColor",
                                                    children: "Interview Medium"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                                className: ""
                                            })
                                        ]
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("tbody", {
                                    children: itemsRight.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                                            className: (0, _cn.default)('border-b', {
                                                'bg-blue-100 opacity-30': item.id === draggedItemRight?.id,
                                                'border-2': item.id === hoveredItemRight?.id,
                                                'border-gray-100': item.id !== hoveredItemRight?.id
                                            }),
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                                    className: "flex items-center justify-between py-[9px] pl-[17px]",
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "flex items-center gap-[8px]",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                draggable: true,
                                                                onDragStart: ()=>handleDragStartRight(item),
                                                                onDragOver: (e)=>handleDragOverRight(e, item),
                                                                onDrop: (e)=>handleDropRight(e, item),
                                                                onDragLeave: ()=>setHoveredItemRight(null),
                                                                className: "cursor-pointer",
                                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.DotsSixVertical, {
                                                                    className: "text-lightGrayColor"
                                                                })
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                                className: "text-twelve font-medium text-dropdownLabelColor",
                                                                children: item.label
                                                            })
                                                        ]
                                                    })
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                                    className: "py-1",
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_interviewStageDropdown.default, {
                                                        name: `interviewMedium[${item.id}]`,
                                                        control: control,
                                                        value: item.interviewMedium,
                                                        onChange: (value)=>{
                                                            const newItemsRight = itemsRight.map((rightItem)=>rightItem.id === item.id ? {
                                                                    ...rightItem,
                                                                    interviewMedium: value
                                                                } : rightItem);
                                                            setItemsRight(newItemsRight);
                                                        },
                                                        options: interviewStageOptions,
                                                        errors: {},
                                                        placeholder: "Select",
                                                        ClassName: ""
                                                    })
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                        className: "cursor-pointer",
                                                        onClick: ()=>removeItem(item.id),
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Trash, {
                                                            size: 20
                                                        })
                                                    })
                                                })
                                            ]
                                        }, item.id))
                                })
                            ]
                        })
                    })
                ]
            })
        ]
    });
};
const _default = InterviewStage;

//# sourceMappingURL=data:application/json;base64,