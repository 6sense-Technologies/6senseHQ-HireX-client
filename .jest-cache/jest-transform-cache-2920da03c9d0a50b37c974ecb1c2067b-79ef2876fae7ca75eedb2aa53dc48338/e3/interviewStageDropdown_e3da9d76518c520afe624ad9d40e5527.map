{"version":3,"sources":["C:\\Users\\khana\\OneDrive\\Computer Files\\Desktop\\6senseHQ-HireX-client\\app\\(dashboards)\\create-job\\_components\\interviewStageDropdown.tsx"],"sourcesContent":["'use client';\nimport * as React from 'react';\nimport { Controller } from 'react-hook-form';\nimport Select from 'react-select';\nimport { Warning } from '@phosphor-icons/react';\n\ntype OptionType = {\n  value: string;\n  label: React.ReactNode;\n};\n\ninterface InterviewStageDropdownProps {\n  placeholder?: string;\n  options?: OptionType[];\n  errors?: any;\n  name: string;\n  control: any;\n  onChange: (value: string) => void;\n  value?: string;\n  ClassName?: string;\n}\n\nconst InterviewStageDropdown: React.FC<InterviewStageDropdownProps> = ({\n  placeholder,\n  options,\n  name,\n  errors,\n  control,\n  onChange,\n  value,\n  ClassName,\n}) => {\n  const customStyles = {\n    control: (provided: any, state: any) => {\n      let backgroundColor = 'white';\n      if (state.hasValue) {\n        const selectedValue = state.getValue()[0].value;\n        if (selectedValue.includes('Online')) {\n          backgroundColor = '#DCFCE7';\n        } else if (selectedValue.includes('Offline')) {\n          backgroundColor = '#E5E7EB';\n        }\n      }\n      return {\n        ...provided,\n        borderColor: errors[name] ? 'red' : '',\n        borderRadius: '200px',\n        width: '120px',\n        backgroundColor: backgroundColor,\n        boxShadow: 'none', // Remove box shadow\n        '&:hover': {\n          borderColor: '',\n        },\n        '&:focus': {\n          borderColor: '', // Remove border color on focus\n          boxShadow: 'none', // Remove box shadow on focus\n        },\n        '&:active': {\n          borderColor: '', // Remove border color on active\n          boxShadow: 'none', // Remove box shadow on active\n        },\n      };\n    },\n    singleValue: (provided: any, state: any) => {\n      const selectedValue = state.getValue()[0].value;\n      return {\n        ...provided,\n        color: selectedValue.includes('Online') ? '#166534' : 'black',\n      };\n    },\n    option: (provided: any, state: any) => ({\n      ...provided,\n      color: 'black',\n      '&:hover': {\n        color: 'black',\n      },\n    }),\n    indicatorSeparator: () => ({\n      display: 'none',\n    }),\n    indicatorsContainer: () => ({\n      color: 'black',\n    }),\n    menu: (provided: any) => ({\n      ...provided,\n      borderRadius: '0.375rem',\n      width: '120px',\n      color: 'black',\n    }),\n  };\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ field, fieldState }) => (\n        <div className={`relative flex items-center`}>\n          <div className='relative w-full max-w-[110px]'>\n            <Select\n              {...field}\n              instanceId={name}\n              value={options?.find((option) => option.value === value) || null}\n              onChange={(selectedOption) => {\n                const selectedValue = selectedOption\n                  ? selectedOption.value\n                  : '';\n                field.onChange(selectedValue);\n                onChange(selectedValue);\n              }}\n              options={options}\n              placeholder={placeholder}\n              className={`text-nowrap text-twelve ${ClassName}`}\n              styles={customStyles}\n              isSearchable={false}\n            />\n            {/* {fieldState.invalid && errors && (\n              <span className='absolute mt-2 flex justify-start text-xs text-red-500'>\n                <Warning className='mr-1 mt-[1px]' />\n                {errors[name]?.message}\n              </span>\n            )} */}\n          </div>\n        </div>\n      )}\n    />\n  );\n};\n\nexport default InterviewStageDropdown;\n"],"names":["InterviewStageDropdown","placeholder","options","name","errors","control","onChange","value","ClassName","customStyles","provided","state","backgroundColor","hasValue","selectedValue","getValue","includes","borderColor","borderRadius","width","boxShadow","singleValue","color","option","indicatorSeparator","display","indicatorsContainer","menu","Controller","render","field","fieldState","div","className","Select","instanceId","find","selectedOption","styles","isSearchable"],"mappings":"AAAA;;;;;+BAgIA;;;eAAA;;;;+DA/HuB;+BACI;oEACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBnB,MAAMA,yBAAgE,CAAC,EACrEC,WAAW,EACXC,OAAO,EACPC,IAAI,EACJC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,KAAK,EACLC,SAAS,EACV;IACC,MAAMC,eAAe;QACnBJ,SAAS,CAACK,UAAeC;YACvB,IAAIC,kBAAkB;YACtB,IAAID,MAAME,QAAQ,EAAE;gBAClB,MAAMC,gBAAgBH,MAAMI,QAAQ,EAAE,CAAC,EAAE,CAACR,KAAK;gBAC/C,IAAIO,cAAcE,QAAQ,CAAC,WAAW;oBACpCJ,kBAAkB;gBACpB,OAAO,IAAIE,cAAcE,QAAQ,CAAC,YAAY;oBAC5CJ,kBAAkB;gBACpB;YACF;YACA,OAAO;gBACL,GAAGF,QAAQ;gBACXO,aAAab,MAAM,CAACD,KAAK,GAAG,QAAQ;gBACpCe,cAAc;gBACdC,OAAO;gBACPP,iBAAiBA;gBACjBQ,WAAW;gBACX,WAAW;oBACTH,aAAa;gBACf;gBACA,WAAW;oBACTA,aAAa;oBACbG,WAAW;gBACb;gBACA,YAAY;oBACVH,aAAa;oBACbG,WAAW;gBACb;YACF;QACF;QACAC,aAAa,CAACX,UAAeC;YAC3B,MAAMG,gBAAgBH,MAAMI,QAAQ,EAAE,CAAC,EAAE,CAACR,KAAK;YAC/C,OAAO;gBACL,GAAGG,QAAQ;gBACXY,OAAOR,cAAcE,QAAQ,CAAC,YAAY,YAAY;YACxD;QACF;QACAO,QAAQ,CAACb,UAAeC,QAAgB,CAAA;gBACtC,GAAGD,QAAQ;gBACXY,OAAO;gBACP,WAAW;oBACTA,OAAO;gBACT;YACF,CAAA;QACAE,oBAAoB,IAAO,CAAA;gBACzBC,SAAS;YACX,CAAA;QACAC,qBAAqB,IAAO,CAAA;gBAC1BJ,OAAO;YACT,CAAA;QACAK,MAAM,CAACjB,WAAmB,CAAA;gBACxB,GAAGA,QAAQ;gBACXQ,cAAc;gBACdC,OAAO;gBACPG,OAAO;YACT,CAAA;IACF;IAEA,qBACE,qBAACM,yBAAU;QACTvB,SAASA;QACTF,MAAMA;QACN0B,QAAQ,CAAC,EAAEC,KAAK,EAAEC,UAAU,EAAE,iBAC5B,qBAACC;gBAAIC,WAAW,CAAC,0BAA0B,CAAC;0BAC1C,cAAA,qBAACD;oBAAIC,WAAU;8BACb,cAAA,qBAACC,oBAAM;wBACJ,GAAGJ,KAAK;wBACTK,YAAYhC;wBACZI,OAAOL,SAASkC,KAAK,CAACb,SAAWA,OAAOhB,KAAK,KAAKA,UAAU;wBAC5DD,UAAU,CAAC+B;4BACT,MAAMvB,gBAAgBuB,iBAClBA,eAAe9B,KAAK,GACpB;4BACJuB,MAAMxB,QAAQ,CAACQ;4BACfR,SAASQ;wBACX;wBACAZ,SAASA;wBACTD,aAAaA;wBACbgC,WAAW,CAAC,wBAAwB,EAAEzB,WAAW;wBACjD8B,QAAQ7B;wBACR8B,cAAc;;;;;AAa5B;MAEA,WAAevC"}