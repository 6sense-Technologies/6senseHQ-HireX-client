ad67f9c51705686742972e21cb07bb23
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacthookform = require("react-hook-form");
const _reactselect = /*#__PURE__*/ _interop_require_default(require("react-select"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const InterviewStageDropdown = ({ placeholder, options, name, errors, control, onChange, value, ClassName })=>{
    const customStyles = {
        control: (provided, state)=>{
            let backgroundColor = 'white';
            if (state.hasValue) {
                const selectedValue = state.getValue()[0].value;
                if (selectedValue.includes('Online')) {
                    backgroundColor = '#DCFCE7';
                } else if (selectedValue.includes('Offline')) {
                    backgroundColor = '#E5E7EB';
                }
            }
            return {
                ...provided,
                borderColor: errors[name] ? 'red' : '',
                borderRadius: '200px',
                width: '120px',
                backgroundColor: backgroundColor,
                boxShadow: 'none',
                '&:hover': {
                    borderColor: ''
                },
                '&:focus': {
                    borderColor: '',
                    boxShadow: 'none'
                },
                '&:active': {
                    borderColor: '',
                    boxShadow: 'none'
                }
            };
        },
        singleValue: (provided, state)=>{
            const selectedValue = state.getValue()[0].value;
            return {
                ...provided,
                color: selectedValue.includes('Online') ? '#166534' : 'black'
            };
        },
        option: (provided, state)=>({
                ...provided,
                color: 'black',
                '&:hover': {
                    color: 'black'
                }
            }),
        indicatorSeparator: ()=>({
                display: 'none'
            }),
        indicatorsContainer: ()=>({
                color: 'black'
            }),
        menu: (provided)=>({
                ...provided,
                borderRadius: '0.375rem',
                width: '120px',
                color: 'black'
            })
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.Controller, {
        control: control,
        name: name,
        render: ({ field, fieldState })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `relative flex items-center`,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "relative w-full max-w-[110px]",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.default, {
                        ...field,
                        instanceId: name,
                        value: options?.find((option)=>option.value === value) || null,
                        onChange: (selectedOption)=>{
                            const selectedValue = selectedOption ? selectedOption.value : '';
                            field.onChange(selectedValue);
                            onChange(selectedValue);
                        },
                        options: options,
                        placeholder: placeholder,
                        className: `text-nowrap text-twelve ${ClassName}`,
                        styles: customStyles,
                        isSearchable: false
                    })
                })
            })
    });
};
const _default = InterviewStageDropdown;

//# sourceMappingURL=data:application/json;base64,