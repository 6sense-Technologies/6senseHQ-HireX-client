{"version":3,"sources":["C:\\Users\\khana\\OneDrive\\Computer Files\\Desktop\\6senseHQ-HireX-client\\__test__\\createjob.test.tsx"],"sourcesContent":["import '@testing-library/jest-dom';\r\nimport { render, screen } from '@testing-library/react';\r\nimport { Provider } from 'react-redux';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { store } from '../store/store';\r\nimport CreateJob from '../app/(dashboards)/create-job/page';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\nconst queryClient = new QueryClient();\r\n\r\njest.mock('@tanstack/react-query', () => ({\r\n  ...jest.requireActual('@tanstack/react-query'),\r\n  useQuery: jest.fn(),\r\n}));\r\n\r\ndescribe('CreateJob Page', () => {\r\n  beforeEach(() => {\r\n    useQuery.mockImplementation(({ queryKey }) => {\r\n      if (queryKey[0] === 'jobpositions') {\r\n        return { data: [{ jobPositionName: 'Developer' }, { jobPositionName: 'Designer' }] };\r\n      }\r\n      if (queryKey[0] === 'departments') {\r\n        return { data: [{ jobDepartmentName: 'Engineering' }, { jobDepartmentName: 'Design' }] };\r\n      }\r\n      return { data: [] };\r\n    });\r\n\r\n    render(\r\n      <Provider store={store}>\r\n        <QueryClientProvider client={queryClient}>\r\n          <CreateJob />\r\n        </QueryClientProvider>\r\n      </Provider>\r\n    );\r\n  });\r\n\r\n  it('renders the headings of the page', () => {\r\n    const headings = ['Job Information', 'Interview Stages', 'Job Responsibilities', 'Ideal Candidate'];\r\n    headings.forEach(heading => {\r\n      expect(screen.getByText(heading)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('renders the labels of the job information section', () => {\r\n    const labels = ['Job Position', 'Job Department (optional)', 'Number of Vacancies'];\r\n    labels.forEach(label => {\r\n      expect(screen.getByText(label)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('renders two tables in the interview stage section', () => {\r\n    const tables = screen.getAllByRole('table');\r\n    expect(tables.length).toBe(2);\r\n  });\r\n});"],"names":["jest","mock","requireActual","useQuery","fn","queryClient","QueryClient","describe","beforeEach","mockImplementation","queryKey","data","jobPositionName","jobDepartmentName","render","Provider","store","QueryClientProvider","client","CreateJob","it","headings","forEach","heading","expect","screen","getByText","toBeInTheDocument","labels","label","tables","getAllByRole","length","toBe"],"mappings":";AAUAA,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxC,GAAGD,KAAKE,aAAa,CAAC,wBAAwB;QAC9CC,UAAUH,KAAKI,EAAE;IACnB,CAAA;;;;;QAbO;uBACwB;4BACN;4BACwB;uBAC3B;6DACA;;;;;;AAGtB,MAAMC,cAAc,IAAIC,uBAAW;AAOnCC,SAAS,kBAAkB;IACzBC,WAAW;QACTL,oBAAQ,CAACM,kBAAkB,CAAC,CAAC,EAAEC,QAAQ,EAAE;YACvC,IAAIA,QAAQ,CAAC,EAAE,KAAK,gBAAgB;gBAClC,OAAO;oBAAEC,MAAM;wBAAC;4BAAEC,iBAAiB;wBAAY;wBAAG;4BAAEA,iBAAiB;wBAAW;qBAAE;gBAAC;YACrF;YACA,IAAIF,QAAQ,CAAC,EAAE,KAAK,eAAe;gBACjC,OAAO;oBAAEC,MAAM;wBAAC;4BAAEE,mBAAmB;wBAAc;wBAAG;4BAAEA,mBAAmB;wBAAS;qBAAE;gBAAC;YACzF;YACA,OAAO;gBAAEF,MAAM,EAAE;YAAC;QACpB;QAEAG,IAAAA,aAAM,gBACJ,qBAACC,oBAAQ;YAACC,OAAOA,YAAK;sBACpB,cAAA,qBAACC,+BAAmB;gBAACC,QAAQb;0BAC3B,cAAA,qBAACc,aAAS;;;IAIlB;IAEAC,GAAG,oCAAoC;QACrC,MAAMC,WAAW;YAAC;YAAmB;YAAoB;YAAwB;SAAkB;QACnGA,SAASC,OAAO,CAACC,CAAAA;YACfC,OAAOC,aAAM,CAACC,SAAS,CAACH,UAAUI,iBAAiB;QACrD;IACF;IAEAP,GAAG,qDAAqD;QACtD,MAAMQ,SAAS;YAAC;YAAgB;YAA6B;SAAsB;QACnFA,OAAON,OAAO,CAACO,CAAAA;YACbL,OAAOC,aAAM,CAACC,SAAS,CAACG,QAAQF,iBAAiB;QACnD;IACF;IAEAP,GAAG,qDAAqD;QACtD,MAAMU,SAASL,aAAM,CAACM,YAAY,CAAC;QACnCP,OAAOM,OAAOE,MAAM,EAAEC,IAAI,CAAC;IAC7B;AACF"}