b7a51652741f60dccbfd816880d189ac
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacthookform = require("react-hook-form");
const _reactselect = /*#__PURE__*/ _interop_require_default(require("react-select"));
const _react1 = require("@phosphor-icons/react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Dropdown = ({ placeholder, options, name, errors, control, setValue, ClassName })=>{
    const customStyles = {
        control: (provided, state)=>({
                ...provided,
                borderColor: errors[name] ? 'red' : provided.borderColor,
                '&:hover': {
                    borderColor: errors[name] ? 'red' : provided.borderColor
                }
            }),
        indicatorSeparator: ()=>({
                display: 'none'
            })
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.Controller, {
        control: control,
        name: name,
        render: ({ field, fieldState })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: `relative flex items-center gap-7`,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "relative w-full",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactselect.default, {
                            ...field,
                            instanceId: name,
                            value: Array.isArray(field.value) ? field.value.map((val)=>options?.find((option)=>option.value === val)) : options?.find((option)=>option.value === field.value) || null,
                            onChange: (selectedOption)=>{
                                const selectedValue = Array.isArray(selectedOption) ? selectedOption.map((option)=>option.value) : selectedOption ? selectedOption.value : '';
                                field.onChange(selectedValue);
                                setValue(name, [
                                    selectedValue
                                ], {
                                    shouldValidate: true
                                });
                            },
                            options: options,
                            placeholder: placeholder,
                            className: `w-full ${ClassName}`,
                            styles: customStyles
                        }),
                        fieldState.invalid && errors && /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: "absolute mt-2 flex justify-start text-xs text-red-500",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.Warning, {
                                    className: "mr-1 mt-[1px]"
                                }),
                                errors[name]?.message
                            ]
                        })
                    ]
                })
            })
    });
};
const _default = Dropdown;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xca2hhbmFcXE9uZURyaXZlXFxDb21wdXRlciBGaWxlc1xcRGVza3RvcFxcNnNlbnNlSFEtSGlyZVgtY2xpZW50XFxjb21wb25lbnRzXFxkcm9wZG93bi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udHJvbGxlciwgVXNlRm9ybVNldFZhbHVlIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7IFdhcm5pbmcgfSBmcm9tICdAcGhvc3Bob3ItaWNvbnMvcmVhY3QnO1xuXG50eXBlIE9wdGlvblR5cGUgPSB7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGxhYmVsOiBzdHJpbmc7XG59O1xuXG5pbnRlcmZhY2UgRHJvcGRvd25Qcm9wcyB7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBvcHRpb25zPzogT3B0aW9uVHlwZVtdO1xuICBlcnJvcnM/OiBhbnk7XG4gIG5hbWU6IHN0cmluZztcbiAgY29udHJvbDogYW55O1xuICBzZXRWYWx1ZTogVXNlRm9ybVNldFZhbHVlPGFueT47XG4gIHZhbHVlPzogc3RyaW5nO1xuICBDbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmNvbnN0IERyb3Bkb3duOiBSZWFjdC5GQzxEcm9wZG93blByb3BzPiA9ICh7XG4gIHBsYWNlaG9sZGVyLFxuICBvcHRpb25zLFxuICBuYW1lLFxuICBlcnJvcnMsXG4gIGNvbnRyb2wsXG4gIHNldFZhbHVlLFxuICBDbGFzc05hbWUsXG59KSA9PiB7XG4gIGNvbnN0IGN1c3RvbVN0eWxlcyA9IHtcbiAgICBjb250cm9sOiAocHJvdmlkZWQ6IGFueSwgc3RhdGU6IGFueSkgPT4gKHtcbiAgICAgIC4uLnByb3ZpZGVkLFxuICAgICAgYm9yZGVyQ29sb3I6IGVycm9yc1tuYW1lXSA/ICdyZWQnIDogcHJvdmlkZWQuYm9yZGVyQ29sb3IsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IGVycm9yc1tuYW1lXSA/ICdyZWQnIDogcHJvdmlkZWQuYm9yZGVyQ29sb3IsXG4gICAgICB9LFxuICAgIH0pLFxuICAgIGluZGljYXRvclNlcGFyYXRvcjogKCkgPT4gKHtcbiAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB9KSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxDb250cm9sbGVyXG4gICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgbmFtZT17bmFtZX1cbiAgICAgIHJlbmRlcj17KHsgZmllbGQsIGZpZWxkU3RhdGUgfSkgPT4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHJlbGF0aXZlIGZsZXggaXRlbXMtY2VudGVyIGdhcC03YH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JlbGF0aXZlIHctZnVsbCc+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgaW5zdGFuY2VJZD17bmFtZX1cbiAgICAgICAgICAgICAgdmFsdWU9e1xuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZmllbGQudmFsdWUpXG4gICAgICAgICAgICAgICAgICA/IGZpZWxkLnZhbHVlLm1hcCgodmFsOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz8uZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT09IHZhbClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgOiBvcHRpb25zPy5maW5kKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSA9PT0gZmllbGQudmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IEFycmF5LmlzQXJyYXkoc2VsZWN0ZWRPcHRpb24pXG4gICAgICAgICAgICAgICAgICA/IHNlbGVjdGVkT3B0aW9uLm1hcCgob3B0aW9uOiBPcHRpb25UeXBlKSA9PiBvcHRpb24udmFsdWUpXG4gICAgICAgICAgICAgICAgICA6IHNlbGVjdGVkT3B0aW9uXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZWN0ZWRPcHRpb24udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiAnJztcbiAgICAgICAgICAgICAgICBmaWVsZC5vbkNoYW5nZShzZWxlY3RlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZShuYW1lLCBbc2VsZWN0ZWRWYWx1ZV0sIHsgc2hvdWxkVmFsaWRhdGU6IHRydWUgfSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdy1mdWxsICR7Q2xhc3NOYW1lfWB9XG4gICAgICAgICAgICAgIHN0eWxlcz17Y3VzdG9tU3R5bGVzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtmaWVsZFN0YXRlLmludmFsaWQgJiYgZXJyb3JzICYmIChcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdhYnNvbHV0ZSBtdC0yIGZsZXgganVzdGlmeS1zdGFydCB0ZXh0LXhzIHRleHQtcmVkLTUwMCc+XG4gICAgICAgICAgICAgICAgPFdhcm5pbmcgY2xhc3NOYW1lPSdtci0xIG10LVsxcHhdJyAvPlxuICAgICAgICAgICAgICAgIHtlcnJvcnNbbmFtZV0/Lm1lc3NhZ2V9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd247XG4iXSwibmFtZXMiOlsiRHJvcGRvd24iLCJwbGFjZWhvbGRlciIsIm9wdGlvbnMiLCJuYW1lIiwiZXJyb3JzIiwiY29udHJvbCIsInNldFZhbHVlIiwiQ2xhc3NOYW1lIiwiY3VzdG9tU3R5bGVzIiwicHJvdmlkZWQiLCJzdGF0ZSIsImJvcmRlckNvbG9yIiwiaW5kaWNhdG9yU2VwYXJhdG9yIiwiZGlzcGxheSIsIkNvbnRyb2xsZXIiLCJyZW5kZXIiLCJmaWVsZCIsImZpZWxkU3RhdGUiLCJkaXYiLCJjbGFzc05hbWUiLCJTZWxlY3QiLCJpbnN0YW5jZUlkIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJ2YWwiLCJmaW5kIiwib3B0aW9uIiwib25DaGFuZ2UiLCJzZWxlY3RlZE9wdGlvbiIsInNlbGVjdGVkVmFsdWUiLCJzaG91bGRWYWxpZGF0ZSIsInN0eWxlcyIsImludmFsaWQiLCJzcGFuIiwiV2FybmluZyIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUFBOzs7OzsrQkF5RkE7OztlQUFBOzs7OytEQXhGdUI7K0JBQ3FCO29FQUN6Qjt3QkFDSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQnhCLE1BQU1BLFdBQW9DLENBQUMsRUFDekNDLFdBQVcsRUFDWEMsT0FBTyxFQUNQQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVjtJQUNDLE1BQU1DLGVBQWU7UUFDbkJILFNBQVMsQ0FBQ0ksVUFBZUMsUUFBZ0IsQ0FBQTtnQkFDdkMsR0FBR0QsUUFBUTtnQkFDWEUsYUFBYVAsTUFBTSxDQUFDRCxLQUFLLEdBQUcsUUFBUU0sU0FBU0UsV0FBVztnQkFDeEQsV0FBVztvQkFDVEEsYUFBYVAsTUFBTSxDQUFDRCxLQUFLLEdBQUcsUUFBUU0sU0FBU0UsV0FBVztnQkFDMUQ7WUFDRixDQUFBO1FBQ0FDLG9CQUFvQixJQUFPLENBQUE7Z0JBQ3pCQyxTQUFTO1lBQ1gsQ0FBQTtJQUNGO0lBRUEscUJBQ0UscUJBQUNDLHlCQUFVO1FBQ1RULFNBQVNBO1FBQ1RGLE1BQU1BO1FBQ05ZLFFBQVEsQ0FBQyxFQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRSxpQkFDNUIscUJBQUNDO2dCQUFJQyxXQUFXLENBQUMsZ0NBQWdDLENBQUM7MEJBQ2hELGNBQUEsc0JBQUNEO29CQUFJQyxXQUFVOztzQ0FDYixxQkFBQ0Msb0JBQU07NEJBQ0osR0FBR0osS0FBSzs0QkFDVEssWUFBWWxCOzRCQUNabUIsT0FDRUMsTUFBTUMsT0FBTyxDQUFDUixNQUFNTSxLQUFLLElBQ3JCTixNQUFNTSxLQUFLLENBQUNHLEdBQUcsQ0FBQyxDQUFDQyxNQUNmeEIsU0FBU3lCLEtBQUssQ0FBQ0MsU0FBV0EsT0FBT04sS0FBSyxLQUFLSSxRQUU3Q3hCLFNBQVN5QixLQUFLLENBQUNDLFNBQVdBLE9BQU9OLEtBQUssS0FBS04sTUFBTU0sS0FBSyxLQUN0RDs0QkFFTk8sVUFBVSxDQUFDQztnQ0FDVCxNQUFNQyxnQkFBZ0JSLE1BQU1DLE9BQU8sQ0FBQ00sa0JBQ2hDQSxlQUFlTCxHQUFHLENBQUMsQ0FBQ0csU0FBdUJBLE9BQU9OLEtBQUssSUFDdkRRLGlCQUNFQSxlQUFlUixLQUFLLEdBQ3BCO2dDQUNOTixNQUFNYSxRQUFRLENBQUNFO2dDQUNmekIsU0FBU0gsTUFBTTtvQ0FBQzRCO2lDQUFjLEVBQUU7b0NBQUVDLGdCQUFnQjtnQ0FBSzs0QkFDekQ7NEJBQ0E5QixTQUFTQTs0QkFDVEQsYUFBYUE7NEJBQ2JrQixXQUFXLENBQUMsT0FBTyxFQUFFWixXQUFXOzRCQUNoQzBCLFFBQVF6Qjs7d0JBRVRTLFdBQVdpQixPQUFPLElBQUk5Qix3QkFDckIsc0JBQUMrQjs0QkFBS2hCLFdBQVU7OzhDQUNkLHFCQUFDaUIsZUFBTztvQ0FBQ2pCLFdBQVU7O2dDQUNsQmYsTUFBTSxDQUFDRCxLQUFLLEVBQUVrQzs7Ozs7OztBQVEvQjtNQUVBLFdBQWVyQyJ9