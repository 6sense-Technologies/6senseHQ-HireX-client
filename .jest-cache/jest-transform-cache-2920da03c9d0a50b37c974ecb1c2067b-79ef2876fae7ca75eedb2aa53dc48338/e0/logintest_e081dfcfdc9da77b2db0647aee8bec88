1c7d471c1595229679797ad8563de816
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _reactredux = require("react-redux");
const _reactquery = require("@tanstack/react-query");
const _store = require("../store/store");
const _page = /*#__PURE__*/ _interop_require_default(require("../app/(auth)/login/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryClient = new _reactquery.QueryClient();
describe('Login Page', ()=>{
    beforeEach(()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactredux.Provider, {
            store: _store.store,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            })
        }));
    });
    it('renders the logo', ()=>{
        const logo = _react.screen.getByAltText('Pattern50 Logo');
        expect(logo).toBeInTheDocument();
    });
    it('renders the title', ()=>{
        const title = _react.screen.getByRole('heading', {
            name: /login/i
        });
        expect(title).toBeInTheDocument();
    });
    it('renders the subtitle', ()=>{
        const subtitle = _react.screen.getByText('Continue with pattern50');
        expect(subtitle).toBeInTheDocument();
    });
    it('renders the email label', ()=>{
        const emailLabel = _react.screen.getByText('Email Address');
        expect(emailLabel).toBeInTheDocument();
    });
    it('renders the password label', ()=>{
        const passwordLabel = _react.screen.getByText('password');
        expect(passwordLabel).toBeInTheDocument();
    });
    it('renders the email placeholder', ()=>{
        const emailPlaceholder = _react.screen.getByPlaceholderText('Email Address');
        expect(emailPlaceholder).toBeInTheDocument();
    });
    it('renders the password placeholder', ()=>{
        const passwordPlaceholder = _react.screen.getByPlaceholderText('Password');
        expect(passwordPlaceholder).toBeInTheDocument();
    });
    it('renders the login button', ()=>{
        const loginButton = _react.screen.getByRole('button', {
            name: /login/i
        });
        expect(loginButton).toBeInTheDocument();
    });
    it('renders the Google button', ()=>{
        const googleButton = _react.screen.getByText('Continue with Google');
        expect(googleButton).toBeInTheDocument();
    });
    it('renders the forgot password link', ()=>{
        const forgotPasswordLink = _react.screen.getByText('Forgot password?');
        expect(forgotPasswordLink).toBeInTheDocument();
    });
    it('renders the text below the login button', ()=>{
        const orDivider = _react.screen.getByText((content, element)=>{
            return element.tagName.toLowerCase() === 'span' && content === 'or';
        });
        expect(orDivider).toBeInTheDocument();
    });
    it('renders the Google button on the left of the Google sign-in button', ()=>{
        const googleButton = _react.screen.getByText('Continue with Google');
        expect(googleButton).toBeInTheDocument();
    });
    it('checks what happens when user hovers on the sign-in button', ()=>{
        const loginButton = _react.screen.getByRole('button', {
            name: /login/i
        });
        _react.fireEvent.mouseOver(loginButton);
        expect(loginButton).toHaveClass('hover:bg-blue-700');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xca2hhbmFcXE9uZURyaXZlXFxDb21wdXRlciBGaWxlc1xcRGVza3RvcFxcNnNlbnNlSFEtSGlyZVgtY2xpZW50XFxfX3Rlc3RfX1xcbG9naW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xyXG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gJy4uL3N0b3JlL3N0b3JlJztcclxuaW1wb3J0IExvZ2luIGZyb20gJy4uL2FwcC8oYXV0aCkvbG9naW4vcGFnZSc7XHJcblxyXG5jb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCgpO1xyXG5cclxuZGVzY3JpYmUoJ0xvZ2luIFBhZ2UnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxyXG4gICAgICAgICAgPExvZ2luIC8+XHJcbiAgICAgICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIGxvZ28nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsb2dvID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnUGF0dGVybjUwIExvZ28nKTtcclxuICAgIGV4cGVjdChsb2dvKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgdGl0bGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB0aXRsZSA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IG5hbWU6IC9sb2dpbi9pIH0pO1xyXG4gICAgZXhwZWN0KHRpdGxlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyB0aGUgc3VidGl0bGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBzdWJ0aXRsZSA9IHNjcmVlbi5nZXRCeVRleHQoJ0NvbnRpbnVlIHdpdGggcGF0dGVybjUwJyk7XHJcbiAgICBleHBlY3Qoc3VidGl0bGUpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBlbWFpbCBsYWJlbCcsICgpID0+IHtcclxuICAgIGNvbnN0IGVtYWlsTGFiZWwgPSBzY3JlZW4uZ2V0QnlUZXh0KCdFbWFpbCBBZGRyZXNzJyk7XHJcbiAgICBleHBlY3QoZW1haWxMYWJlbCkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIHBhc3N3b3JkIGxhYmVsJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcGFzc3dvcmRMYWJlbCA9IHNjcmVlbi5nZXRCeVRleHQoJ3Bhc3N3b3JkJyk7XHJcbiAgICBleHBlY3QocGFzc3dvcmRMYWJlbCkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgdGhlIGVtYWlsIHBsYWNlaG9sZGVyJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZW1haWxQbGFjZWhvbGRlciA9IHNjcmVlbi5nZXRCeVBsYWNlaG9sZGVyVGV4dCgnRW1haWwgQWRkcmVzcycpO1xyXG4gICAgZXhwZWN0KGVtYWlsUGxhY2Vob2xkZXIpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBwYXNzd29yZCBwbGFjZWhvbGRlcicsICgpID0+IHtcclxuICAgIGNvbnN0IHBhc3N3b3JkUGxhY2Vob2xkZXIgPSBzY3JlZW4uZ2V0QnlQbGFjZWhvbGRlclRleHQoJ1Bhc3N3b3JkJyk7XHJcbiAgICBleHBlY3QocGFzc3dvcmRQbGFjZWhvbGRlcikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBsb2dpbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsb2dpbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2xvZ2luL2kgfSk7XHJcbiAgICBleHBlY3QobG9naW5CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBHb29nbGUgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZ29vZ2xlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnQ29udGludWUgd2l0aCBHb29nbGUnKTtcclxuICAgIGV4cGVjdChnb29nbGVCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBmb3Jnb3QgcGFzc3dvcmQgbGluaycsICgpID0+IHtcclxuICAgIGNvbnN0IGZvcmdvdFBhc3N3b3JkTGluayA9IHNjcmVlbi5nZXRCeVRleHQoJ0ZvcmdvdCBwYXNzd29yZD8nKTtcclxuICAgIGV4cGVjdChmb3Jnb3RQYXNzd29yZExpbmspLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSB0ZXh0IGJlbG93IHRoZSBsb2dpbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBvckRpdmlkZXIgPSBzY3JlZW4uZ2V0QnlUZXh0KChjb250ZW50LCBlbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NwYW4nICYmIGNvbnRlbnQgPT09ICdvcic7XHJcbiAgICB9KTtcclxuICAgIGV4cGVjdChvckRpdmlkZXIpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIHRoZSBHb29nbGUgYnV0dG9uIG9uIHRoZSBsZWZ0IG9mIHRoZSBHb29nbGUgc2lnbi1pbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBnb29nbGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdDb250aW51ZSB3aXRoIEdvb2dsZScpO1xyXG4gICAgZXhwZWN0KGdvb2dsZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2NoZWNrcyB3aGF0IGhhcHBlbnMgd2hlbiB1c2VyIGhvdmVycyBvbiB0aGUgc2lnbi1pbiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBsb2dpbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2xvZ2luL2kgfSk7XHJcbiAgICBmaXJlRXZlbnQubW91c2VPdmVyKGxvZ2luQnV0dG9uKTtcclxuICAgIGV4cGVjdChsb2dpbkJ1dHRvbikudG9IYXZlQ2xhc3MoJ2hvdmVyOmJnLWJsdWUtNzAwJyk7XHJcbiAgfSk7XHJcbn0pOyJdLCJuYW1lcyI6WyJxdWVyeUNsaWVudCIsIlF1ZXJ5Q2xpZW50IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwicmVuZGVyIiwiUHJvdmlkZXIiLCJzdG9yZSIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJjbGllbnQiLCJMb2dpbiIsIml0IiwibG9nbyIsInNjcmVlbiIsImdldEJ5QWx0VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwidGl0bGUiLCJnZXRCeVJvbGUiLCJuYW1lIiwic3VidGl0bGUiLCJnZXRCeVRleHQiLCJlbWFpbExhYmVsIiwicGFzc3dvcmRMYWJlbCIsImVtYWlsUGxhY2Vob2xkZXIiLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsInBhc3N3b3JkUGxhY2Vob2xkZXIiLCJsb2dpbkJ1dHRvbiIsImdvb2dsZUJ1dHRvbiIsImZvcmdvdFBhc3N3b3JkTGluayIsIm9yRGl2aWRlciIsImNvbnRlbnQiLCJlbGVtZW50IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiZmlyZUV2ZW50IiwibW91c2VPdmVyIiwidG9IYXZlQ2xhc3MiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQU87dUJBQ21DOzRCQUNqQjs0QkFDd0I7dUJBQzNCOzZEQUNKOzs7Ozs7QUFFbEIsTUFBTUEsY0FBYyxJQUFJQyx1QkFBVztBQUVuQ0MsU0FBUyxjQUFjO0lBQ3JCQyxXQUFXO1FBQ1RDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLG9CQUFRO1lBQUNDLE9BQU9BLFlBQUs7c0JBQ3BCLGNBQUEscUJBQUNDLCtCQUFtQjtnQkFBQ0MsUUFBUVI7MEJBQzNCLGNBQUEscUJBQUNTLGFBQUs7OztJQUlkO0lBRUFDLEdBQUcsb0JBQW9CO1FBQ3JCLE1BQU1DLE9BQU9DLGFBQU0sQ0FBQ0MsWUFBWSxDQUFDO1FBQ2pDQyxPQUFPSCxNQUFNSSxpQkFBaUI7SUFDaEM7SUFFQUwsR0FBRyxxQkFBcUI7UUFDdEIsTUFBTU0sUUFBUUosYUFBTSxDQUFDSyxTQUFTLENBQUMsV0FBVztZQUFFQyxNQUFNO1FBQVM7UUFDM0RKLE9BQU9FLE9BQU9ELGlCQUFpQjtJQUNqQztJQUVBTCxHQUFHLHdCQUF3QjtRQUN6QixNQUFNUyxXQUFXUCxhQUFNLENBQUNRLFNBQVMsQ0FBQztRQUNsQ04sT0FBT0ssVUFBVUosaUJBQWlCO0lBQ3BDO0lBRUFMLEdBQUcsMkJBQTJCO1FBQzVCLE1BQU1XLGFBQWFULGFBQU0sQ0FBQ1EsU0FBUyxDQUFDO1FBQ3BDTixPQUFPTyxZQUFZTixpQkFBaUI7SUFDdEM7SUFFQUwsR0FBRyw4QkFBOEI7UUFDL0IsTUFBTVksZ0JBQWdCVixhQUFNLENBQUNRLFNBQVMsQ0FBQztRQUN2Q04sT0FBT1EsZUFBZVAsaUJBQWlCO0lBQ3pDO0lBRUFMLEdBQUcsaUNBQWlDO1FBQ2xDLE1BQU1hLG1CQUFtQlgsYUFBTSxDQUFDWSxvQkFBb0IsQ0FBQztRQUNyRFYsT0FBT1Msa0JBQWtCUixpQkFBaUI7SUFDNUM7SUFFQUwsR0FBRyxvQ0FBb0M7UUFDckMsTUFBTWUsc0JBQXNCYixhQUFNLENBQUNZLG9CQUFvQixDQUFDO1FBQ3hEVixPQUFPVyxxQkFBcUJWLGlCQUFpQjtJQUMvQztJQUdBTCxHQUFHLDRCQUE0QjtRQUM3QixNQUFNZ0IsY0FBY2QsYUFBTSxDQUFDSyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQVM7UUFDaEVKLE9BQU9ZLGFBQWFYLGlCQUFpQjtJQUN2QztJQUVBTCxHQUFHLDZCQUE2QjtRQUM5QixNQUFNaUIsZUFBZWYsYUFBTSxDQUFDUSxTQUFTLENBQUM7UUFDdENOLE9BQU9hLGNBQWNaLGlCQUFpQjtJQUN4QztJQUVBTCxHQUFHLG9DQUFvQztRQUNyQyxNQUFNa0IscUJBQXFCaEIsYUFBTSxDQUFDUSxTQUFTLENBQUM7UUFDNUNOLE9BQU9jLG9CQUFvQmIsaUJBQWlCO0lBQzlDO0lBRUFMLEdBQUcsMkNBQTJDO1FBQzVDLE1BQU1tQixZQUFZakIsYUFBTSxDQUFDUSxTQUFTLENBQUMsQ0FBQ1UsU0FBU0M7WUFDM0MsT0FBT0EsUUFBUUMsT0FBTyxDQUFDQyxXQUFXLE9BQU8sVUFBVUgsWUFBWTtRQUNqRTtRQUNBaEIsT0FBT2UsV0FBV2QsaUJBQWlCO0lBQ3JDO0lBRUFMLEdBQUcsc0VBQXNFO1FBQ3ZFLE1BQU1pQixlQUFlZixhQUFNLENBQUNRLFNBQVMsQ0FBQztRQUN0Q04sT0FBT2EsY0FBY1osaUJBQWlCO0lBQ3hDO0lBRUFMLEdBQUcsOERBQThEO1FBQy9ELE1BQU1nQixjQUFjZCxhQUFNLENBQUNLLFNBQVMsQ0FBQyxVQUFVO1lBQUVDLE1BQU07UUFBUztRQUNoRWdCLGdCQUFTLENBQUNDLFNBQVMsQ0FBQ1Q7UUFDcEJaLE9BQU9ZLGFBQWFVLFdBQVcsQ0FBQztJQUNsQztBQUNGIn0=